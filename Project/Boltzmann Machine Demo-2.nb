(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    355127,       7876]
NotebookOptionsPosition[    351183,       7754]
NotebookOutlinePosition[    352803,       7805]
CellTagsIndexPosition[    352467,       7793]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Visualizing Basins of Attraction for Boltzmann Machines\
\>", "DemoTitle",
 CellChangeTimes->{{3.550590543458501*^9, 3.550590564121051*^9}}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Drawing", "[", 
     RowBox[{"N_", ",", "k_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\n", 
      RowBox[{
       RowBox[{"SeedRandom", "[", "k", "]"}], ";", "\n", 
       RowBox[{"W", "=", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "10"}], ",", 
            RowBox[{"+", "10"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"N", ",", "N"}], "}"}]}], "]"}]}], ";", "\n", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"W", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "i"}], "]"}], "]"}], " ", "=", " ", "0"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"i", ",", "N"}], "}"}]}], "]"}], ";", "\n", 
       RowBox[{"W", "=", 
        RowBox[{"W", "+", 
         RowBox[{"W", "\[Transpose]"}]}]}], ";", "\n", 
       RowBox[{"theta", "=", 
        RowBox[{"RandomReal", "[", 
         RowBox[{"4", ",", "N"}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"Energy", "[", 
          RowBox[{"w_", ",", "\[Theta]_"}], "]"}], "[", "s_", "]"}], " ", ":=",
         " ", 
        RowBox[{
         RowBox[{"\[Theta]", " ", ".", " ", "s"}], " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"s", " ", ".", " ", "w", ".", " ", "s"}], ")"}], "/", 
           "2"}], ")"}]}]}], ";", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"UpdateState", "[", 
          RowBox[{"w_", ",", "\[Theta]_"}], "]"}], "[", "s_", "]"}], ":=", 
        " ", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s2", " ", "=", " ", 
            RowBox[{"MapAt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"1", "-", "#"}], "&"}], ",", " ", "s", ",", " ", 
              RowBox[{"RandomInteger", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"Length", "[", "s", "]"}]}], "}"}], "]"}]}], "]"}]}],
            "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Energy", "[", 
               RowBox[{"w", ",", "\[Theta]"}], "]"}], "[", "s2", "]"}], "<", 
             RowBox[{
              RowBox[{"Energy", "[", 
               RowBox[{"w", ",", "\[Theta]"}], "]"}], "[", "s", "]"}]}], ",", 
            "s2", ",", "s"}], "]"}]}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"graycode", "[", "n_", "]"}], ":=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerDigits", "[", 
            RowBox[{"#", ",", "2", ",", "n"}], "]"}], "&"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"BitXor", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Floor", "[", 
                RowBox[{"#", "/", "2"}], "]"}]}], "]"}], "&"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", "n"}], "-", "1"}]}], "]"}]}], "]"}]}], 
         "]"}]}], ";", "\n", "\n", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"Converge2", "[", 
          RowBox[{"w_", ",", "\[Theta]_"}], "]"}], "[", "state_", "]"}], ":=", 
        RowBox[{"Module", "[", "\n", "\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"state2", "=", "state"}], ",", 
            RowBox[{"len", "=", 
             RowBox[{"Length", "[", "state", "]"}]}], ",", " ", "newstate", 
            ",", "i", ",", " ", "energy", ",", " ", "newenergy"}], "}"}], ",",
           "\n", "\t", 
          RowBox[{
           RowBox[{"energy", " ", "=", " ", 
            RowBox[{
             RowBox[{"\[Theta]", " ", ".", " ", "state"}], " ", "-", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"state", " ", ".", " ", "w", ".", " ", "state"}], 
                ")"}], "/", "2"}], ")"}]}]}], ";", "\n", "\t", 
           RowBox[{"Do", "[", "\n", "\t\t", 
            RowBox[{
             RowBox[{
              RowBox[{"i", " ", "=", " ", 
               RowBox[{"RandomInteger", "[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "len"}], "}"}], "]"}]}], ";", "\n", "\t\t", 
              RowBox[{"newstate", " ", "=", " ", "state2"}], ";", "\n", 
              "\t\t", 
              RowBox[{
               RowBox[{"newstate", "[", 
                RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"1", " ", "-", " ", 
                RowBox[{"newstate", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}]}], ";", "\n", "\t\t", 
              RowBox[{"newenergy", " ", "=", " ", 
               RowBox[{
                RowBox[{"\[Theta]", " ", ".", " ", "newstate"}], " ", "-", 
                " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                   "newstate", " ", ".", " ", "w", ".", " ", "newstate"}], 
                   ")"}], "/", "2"}], ")"}]}]}], ";", "\n", "\t\t", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"newenergy", " ", "<", " ", "energy"}], ",", "\n", 
                "\t\t\t", 
                RowBox[{
                 RowBox[{"state2", " ", "=", " ", "newstate"}], ";", "\n", 
                 "\t\t\t", 
                 RowBox[{"energy", " ", "=", " ", "newenergy"}], ";"}]}], 
               "\n", "\t\t", "]"}]}], "\n", "\t", ",", "\n", "\t\t", 
             RowBox[{"{", "100", "}"}]}], "\n", "\t", "]"}], ";", "\n", "\t", 
           "state2"}]}], "\n", "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"FindAttractors", "[", 
          RowBox[{"w_", ",", "\[Theta]_"}], "]"}], "[", "state_", "]"}], " ", 
        ":=", " ", 
        RowBox[{"Tally", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Converge2", "[", 
             RowBox[{"w", ",", "\[Theta]"}], "]"}], "[", "state", "]"}], ",", 
           
           RowBox[{"{", 
            RowBox[{"i", ",", "10"}], "}"}]}], "]"}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"FindBasins", "[", 
         RowBox[{"w_", ",", "\[Theta]_"}], "]"}], ":=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"FindAttractors", "[", 
              RowBox[{"w", ",", "\[Theta]"}], "]"}], "[", "#", "]"}], ",", 
            "#"}], "}"}], "&"}], "/@", 
         RowBox[{"graycode", "[", 
          RowBox[{"Length", "[", "\[Theta]", "]"}], "]"}]}]}], ";", "\n", 
       RowBox[{"basins", " ", "=", " ", 
        RowBox[{"FindBasins", "[", 
         RowBox[{"W", ",", " ", "theta"}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"nbrs", "[", "state_", "]"}], ":=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"ReplacePart", "[", 
           RowBox[{"state", ",", 
            RowBox[{"j", "\[Rule]", 
             RowBox[{"1", "-", 
              RowBox[{"state", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}]}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", 
            RowBox[{"Length", "[", "state", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"MinimumQ", "[", 
          RowBox[{"w_", ",", "\[Theta]_"}], "]"}], "[", "state_", "]"}], ":=", 
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Energy", "[", 
             RowBox[{"w", ",", "\[Theta]"}], "]"}], ",", 
            RowBox[{"nbrs", "[", "state", "]"}]}], "]"}], "]"}], " ", ">", 
         " ", 
         RowBox[{
          RowBox[{"Energy", "[", 
           RowBox[{"w", ",", "\[Theta]"}], "]"}], "[", "state", "]"}]}]}], 
       ";", "\n", 
       RowBox[{
        RowBox[{"AllAttractors", "[", 
         RowBox[{"w_", ",", "\[Theta]_"}], "]"}], ":=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Tuples", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", 
            RowBox[{"Length", "[", "\[Theta]", "]"}]}], "]"}], ",", " ", 
          RowBox[{"MinimumQ", "[", 
           RowBox[{"w", ",", "\[Theta]"}], "]"}]}], "]"}]}], ";", "\n", 
       RowBox[{"att1", "=", 
        RowBox[{"AllAttractors", "[", 
         RowBox[{"W", ",", "theta"}], "]"}]}], ";", "\n", 
       RowBox[{"att", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"graycode", "[", "N", "]"}], ",", 
          RowBox[{"Alternatives", "@@", "att1"}]}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"blend", "[", 
         RowBox[{
          RowBox[{"{", "x_", "}"}], ",", " ", 
          RowBox[{"{", "_", "}"}]}], "]"}], " ", ":=", " ", "x"}], ";", "\n", 
       
       RowBox[{
        RowBox[{"blend", "[", 
         RowBox[{"a_", ",", " ", "b_"}], "]"}], ":=", 
        RowBox[{"Blend", "[", 
         RowBox[{"a", ",", "b"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       "\n", 
       RowBox[{
        RowBox[{"colourmap", "[", "l_", "]"}], ":=", " ", 
        RowBox[{"Hue", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Position", "[", 
                RowBox[{"att", ",", "l"}], "]"}], "]"}], "+", "0.4"}], ")"}], 
            "/.", 
            RowBox[{
             RowBox[{"{", "}"}], "\[Rule]", "0.2"}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"Length", "[", "att", "]"}], ")"}]}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"weightedcolour", "[", "l_", "]"}], " ", ":=", " ", 
        RowBox[{"blend", "[", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"colourmap", ",", " ", 
            RowBox[{"l", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], ",", " ", 
          RowBox[{"l", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"Indexpos", "[", "k1_", "]"}], "[", 
         RowBox[{"{", 
          RowBox[{"a_", ",", "b_"}], "}"}], "]"}], ":=", 
        RowBox[{"{", 
         RowBox[{"a", ",", "k1"}], "}"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"PutIndex", "[", "lis_", "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"l", "=", 
            RowBox[{"{", "}"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"For", " ", "[", 
            RowBox[{
             RowBox[{"p", "=", "1"}], ",", 
             RowBox[{"p", "<=", 
              RowBox[{"Length", "[", "lis", "]"}]}], ",", 
             RowBox[{"p", "++"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"l", ",", 
               RowBox[{
                RowBox[{"Indexpos", "[", "p", "]"}], "[", 
                RowBox[{"lis", "[", 
                 RowBox[{"[", "p", "]"}], "]"}], "]"}]}], "]"}]}], "]"}], ";",
            "l"}]}], "]"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"rot", "[", 
         RowBox[{"s_", ",", "x_", ",", "y_", ",", "rx_", ",", "ry_"}], "]"}], 
        ":=", 
        RowBox[{"Module", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x1", "=", "x"}], ",", 
            RowBox[{"y1", "=", "y"}], ",", "tp"}], "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"ry", "\[Equal]", "0"}], ",", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"rx", "\[Equal]", "1"}], ",", 
                RowBox[{
                 RowBox[{"x1", "=", 
                  RowBox[{"s", "-", "1", "-", "x"}]}], ";", 
                 RowBox[{"y1", "=", 
                  RowBox[{"s", "-", "1", "-", "y"}]}], ";"}]}], "]"}], ";", 
              RowBox[{"tp", "=", "x1"}], ";", 
              RowBox[{"x1", "=", "y1"}], ";", 
              RowBox[{"y1", "=", "tp"}], ";"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"s", ",", "x1", ",", "y1", ",", "rx", ",", "ry"}], 
            "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"d2xy", "[", "n_", "]"}], "[", "d_", "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"rx", ",", "ry", ",", 
            RowBox[{"t", "=", "d"}], ",", 
            RowBox[{"x", "=", "0"}], ",", 
            RowBox[{"y", "=", "0"}], ",", "s"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"For", "[", 
            RowBox[{
             RowBox[{"s", "=", "1"}], ",", 
             RowBox[{"s", "<", "n"}], ",", 
             RowBox[{"s", "*=", "2"}], ",", 
             RowBox[{
              RowBox[{"rx", "=", 
               RowBox[{"BitAnd", "[", 
                RowBox[{"1", ",", 
                 RowBox[{"Floor", "[", 
                  RowBox[{"(", 
                   RowBox[{"t", "/", "2"}], ")"}], "]"}]}], "]"}]}], ";", 
              RowBox[{"ry", "=", 
               RowBox[{"BitAnd", "[", 
                RowBox[{"1", ",", 
                 RowBox[{"BitXor", "[", 
                  RowBox[{"t", ",", "rx"}], "]"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s", ",", "x", ",", "y", ",", "rx", ",", "ry"}], 
                "}"}], "=", 
               RowBox[{"rot", "[", 
                RowBox[{"s", ",", "x", ",", "y", ",", "rx", ",", "ry"}], 
                "]"}]}], ";", 
              RowBox[{"x", "=", 
               RowBox[{"x", "+", 
                RowBox[{"(", 
                 RowBox[{"s", "*", "rx"}], ")"}]}]}], ";", 
              RowBox[{"y", "=", 
               RowBox[{"y", "+", 
                RowBox[{"(", 
                 RowBox[{"s", "*", "ry"}], ")"}]}]}], ";", 
              RowBox[{"t", "=", 
               RowBox[{"Floor", "[", 
                RowBox[{"t", "/", "4"}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"x", ",", "y"}], "}"}]}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\n", 
       RowBox[{
        RowBox[{"MapHilbert", "[", 
         RowBox[{"l_", ",", "n_"}], "]"}], ":=", " ", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#1", ",", 
             RowBox[{
              RowBox[{"d2xy", "[", "n", "]"}], "[", "#2", "]"}]}], "}"}], 
           "&"}], ",", 
          RowBox[{"Transpose", "@", "l"}]}], "]"}]}], ";", "\n", 
       RowBox[{"h", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"weightedcolour", "[", "#1", "]"}], ",", " ", "#2"}], 
           "}"}], "&"}], " ", "@@@", " ", 
         RowBox[{"MapHilbert", "[", 
          RowBox[{
           RowBox[{"PutIndex", "[", "basins", "]"}], ",", 
           RowBox[{"(", 
            RowBox[{"2", "^", 
             RowBox[{"(", 
              RowBox[{"N", "/", "2"}], ")"}]}], ")"}]}], "]"}]}]}], ";", "\n", 
       RowBox[{"arr", "=", 
        RowBox[{"Array", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"N", "/", "2"}], ")"}]}], ")"}], ",", 
            RowBox[{"(", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"N", "/", "2"}], ")"}]}], ")"}]}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"setarr", "[", 
         RowBox[{"col_", ",", " ", 
          RowBox[{"{", 
           RowBox[{"p1_", ",", "p2_"}], "}"}]}], "]"}], ":=", 
        RowBox[{
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", "+", "p1"}], ",", 
            RowBox[{"1", "+", "p2"}]}], "]"}], "]"}], "=", "col"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"setarr", " ", "@@@", " ", "h"}], ";", "\n", 
       RowBox[{"ArrayPlot", "[", 
        RowBox[{"arr", ",", 
         RowBox[{"ImageSize", "\[Rule]", "480"}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", 
          RowBox[{"4", "/", "5"}]}]}], "]"}]}]}], "\n", "\n", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}]}]], "Input",\

 CellChangeTimes->{{3.550596425401907*^9, 3.550596426037751*^9}, {
  3.5506154710470877`*^9, 3.5506154767986507`*^9}, {3.55061551946636*^9, 
  3.550615661621581*^9}},
 CellID->1753350093]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Drawing", "[", 
    RowBox[{"m", ",", "k"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "4", ",", "\"\<Number Of Units : N \>\""}], "}"}], 
     ",", "4", ",", "8", ",", "2", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", "\"\<Random Weight Matrix\>\""}], "}"}], 
     ",", "1", ",", "5", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.550596713563944*^9, 3.550596731157566*^9}, {
   3.550596781294669*^9, 3.5505967898241568`*^9}, 3.550596985868391*^9, {
   3.550615275187887*^9, 3.550615303825817*^9}, {3.550615349227582*^9, 
   3.5506153802881308`*^9}, {3.550615430863158*^9, 3.550615460653585*^9}},
 CellID->1511770166],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 2, $CellContext`m$$ = 8, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 4, "Number Of Units : N "}, 4, 8, 2}, {{
       Hold[$CellContext`k$$], 1, "Random Weight Matrix"}, 1, 5, 1}}, 
    Typeset`size$$ = {480., {190., 194.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`m$3798246$$ = 0, $CellContext`k$3798247$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 1, $CellContext`m$$ = 4}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$3798246$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$3798247$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`Drawing[$CellContext`m$$, $CellContext`k$$], 
      "Specifications" :> {{{$CellContext`m$$, 4, "Number Of Units : N "}, 4, 
         8, 2, Appearance -> 
         "Labeled"}, {{$CellContext`k$$, 1, "Random Weight Matrix"}, 1, 5, 1, 
         Appearance -> "Labeled"}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{523., {246., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`Drawing[
         Pattern[N, 
          Blank[]]] := 
       Module[{}, RandomSeed[1]; $CellContext`W = RandomReal[{-100, 
             Plus[100]}, {2 N, 2 N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, 2 N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[10, 2 N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - 
                Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              120}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; 
         Length[$CellContext`basins]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[2 N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[(Flatten[
               Position[$CellContext`att, $CellContext`l]] - 1.)/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^N], {
            1}]; $CellContext`arr = 
          Array[0, {2^N, 2^N}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`Drawing[
         Pattern[N, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{}, 
         SeedRandom[$CellContext`k]; $CellContext`W = RandomReal[{-10, 
             Plus[10]}, {N, N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[4, N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              100}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[ReplaceAll[Flatten[
                Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k1, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k1}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^(N/2)], {
            1}]; $CellContext`arr = 
          Array[0, {2^(N/2), 2^(N/2)}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr, ImageSize -> 480, AspectRatio -> 
           4/5]], $CellContext`W = {{
         0, -8.25432609167687, -11.099384387242857`, -4.252986721572764, \
-15.772062907903557`, 2.4414499829391865`}, {-8.25432609167687, 0, 
          7.721051549234904, 5.465204880722197, 
          8.700546416514204, -0.15606291695346286`}, {-11.099384387242857`, 
          7.721051549234904, 
          0, -4.029872893520569, -2.384498318575101, -5.523218724112155}, \
{-4.252986721572764, 5.465204880722197, -4.029872893520569, 0, 
          1.9845411942615492`, 8.103062422259413}, {-15.772062907903557`, 
          8.700546416514204, -2.384498318575101, 1.9845411942615492`, 
          0, -5.977670211339298}, {
         2.4414499829391865`, -0.15606291695346286`, -5.523218724112155, 
          8.103062422259413, -5.977670211339298, 0}}, $CellContext`theta = {
        0.7817373379106485, 1.7202930099736005`, 3.6579387316209946`, 
        0.4520579075376485, 3.9890093524141577`, 
        3.5856858382353156`}, $CellContext`Energy[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Dot[$CellContext`\[Theta], $CellContext`s] - 
        Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
        2, $CellContext`UpdateState[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
            RandomInteger[{1, 
              Length[$CellContext`s]}]]}, 
         If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]], \
$CellContext`graycode[
         Pattern[$CellContext`n, 
          Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
         Map[BitXor[#, 
           Floor[#/2]]& , 
          Range[0, 2^$CellContext`n - 1]]], $CellContext`Converge2[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := 
       Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
          Length[$CellContext`state], $CellContext`newstate, $CellContext`i, \
$CellContext`energy, $CellContext`newenergy}, $CellContext`energy = 
          Dot[$CellContext`\[Theta], $CellContext`state] - 
           Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
         Do[$CellContext`i = 
            RandomInteger[{
              1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
           Part[$CellContext`newstate, $CellContext`i] = 
            1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
            Dot[$CellContext`\[Theta], $CellContext`newstate] - 
             Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
           If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
           100}]; $CellContext`state2], $CellContext`FindAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Tally[
         Table[
          $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
           10}]], $CellContext`FindBasins[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Map[{
          $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
         $CellContext`graycode[
          
          Length[$CellContext`\[Theta]]]], $CellContext`basins = {{{{{0, 0, 0,
             0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 0, 1, 1, 0}, 6}}, {0, 0, 0, 
          0, 0, 1}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {0, 
          0, 0, 0, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0}, 5}}, {0, 0, 0, 
          0, 1, 0}}, {{{{0, 1, 0, 1, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0}, 2}}, {0, 
          0, 0, 1, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {0, 0, 0, 
          1, 1, 1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0}, 2}}, {0, 0, 1, 
          1, 0, 0}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {0, 
          0, 1, 1, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {0, 0, 1, 
          1, 1, 1}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {0, 
          0, 1, 1, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {0, 0, 1, 
          0, 1, 0}}, {{{{0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 0, 1, 1, 0}, 9}}, {0, 
          0, 1, 0, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {0, 0, 1, 
          0, 0, 1}}, {{{{0, 1, 0, 1, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0}, 5}}, {0, 
          0, 1, 0, 0, 0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {0, 1, 1, 
          0, 1, 1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {0, 1, 0, 
          0, 1, 1}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {0, 
          1, 0, 0, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0}, 2}}, {0, 1, 0, 
          0, 0, 0}}, {{{{0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 0, 1, 1, 0}, 5}}, {1, 
          1, 0, 0, 0, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0}, 5}}, {1, 1, 0, 
          0, 0, 1}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {1, 
          1, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 0, 1, 1, 0}, 8}}, {1, 1, 0, 
          0, 1, 0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 1, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0}, 6}, {{0, 1, 0, 1, 1, 0}, 4}}, {1, 1, 0, 
          1, 0, 0}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {1, 
          1, 1, 1, 0, 0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0}, 2}}, {1, 1, 1, 
          0, 1, 0}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {1, 
          1, 1, 0, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0}, 2}}, {1, 1, 1, 
          0, 0, 1}}, {{{{0, 1, 0, 1, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0}, 4}}, {1, 
          1, 1, 0, 0, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0}, 5}}, {1, 0, 1, 
          0, 0, 0}}, {{{{0, 0, 0, 0, 0, 0}, 6}, {{0, 1, 0, 1, 1, 0}, 4}}, {1, 
          0, 1, 0, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0}, 1}}, {1, 0, 1, 
          0, 1, 1}}, {{{{0, 0, 0, 0, 0, 0}, 7}, {{0, 1, 0, 1, 1, 0}, 3}}, {1, 
          0, 1, 0, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {1, 0, 1, 
          1, 1, 0}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {1, 
          0, 1, 1, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0}, 2}}, {1, 0, 1, 
          1, 0, 1}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {1, 
          0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 0, 1, 1, 0}, 8}}, {1, 0, 0, 
          1, 0, 0}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 10}}, {1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 0, 1, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0}, 3}}, {1, 0, 0, 
          1, 1, 0}}, {{{{0, 0, 0, 0, 0, 0}, 7}, {{0, 1, 0, 1, 1, 0}, 3}}, {1, 
          0, 0, 0, 1, 
          0}}, {{{{0, 1, 0, 1, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0}, 4}}, {1, 0, 0, 
          0, 1, 1}}, {{{{0, 0, 0, 0, 0, 0}, 6}, {{0, 1, 0, 1, 1, 0}, 4}}, {1, 
          0, 0, 0, 0, 1}}, {{{{0, 0, 0, 0, 0, 0}, 10}}, {1, 0, 0, 0, 0, 
          0}}}, $CellContext`nbrs[
         Pattern[$CellContext`state, 
          Blank[]]] := Table[
         ReplacePart[$CellContext`state, $CellContext`j -> 
          1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
          Length[$CellContext`state]}], $CellContext`MinimumQ[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Min[
          Map[
           $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
           $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], $CellContext`AllAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Select[
         Tuples[{0, 1}, 
          Length[$CellContext`\[Theta]]], 
         $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]], \
$CellContext`att1 = {{0, 0, 0, 0, 0, 0}, {0, 1, 0, 1, 1, 
        0}}, $CellContext`att = {{0, 0, 0, 0, 0, 0}, {0, 1, 0, 1, 1, 
        0}}, $CellContext`blend[{
          Pattern[$CellContext`x, 
           Blank[]]}, {
          Blank[]}] := $CellContext`x, $CellContext`blend[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := 
       Blend[$CellContext`a, $CellContext`b], $CellContext`colourmap[
         Pattern[$CellContext`l, 
          Blank[]]] := Hue[ReplaceAll[Flatten[
             Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
         Length[$CellContext`att]], $CellContext`weightedcolour[
         Pattern[$CellContext`l, 
          Blank[]]] := $CellContext`blend[
         Map[$CellContext`colourmap, 
          Part[$CellContext`l, All, 1]], 
         Part[$CellContext`l, All, 2]], $CellContext`Indexpos[
         Pattern[$CellContext`k1, 
          Blank[]]][{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           
           Blank[]]}] := {$CellContext`a, $CellContext`k1}, \
$CellContext`PutIndex[
         Pattern[$CellContext`lis, 
          Blank[]]] := 
       Module[{$CellContext`l = {}}, 
         For[$CellContext`p = 1, $CellContext`p <= Length[$CellContext`lis], 
           Increment[$CellContext`p], 
           AppendTo[$CellContext`l, 
            $CellContext`Indexpos[$CellContext`p][
             
             Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l], \
$CellContext`p = 65, $CellContext`rot[
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`y, 
          Blank[]], 
         Pattern[$CellContext`rx, 
          Blank[]], 
         Pattern[$CellContext`ry, 
          Blank[]]] := 
       Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
         If[$CellContext`ry == 0, 
           If[$CellContext`rx == 
             1, $CellContext`x1 = $CellContext`s - 
               1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
               1 - $CellContext`y; 
             Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
           Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}], $CellContext`d2xy[
         Pattern[$CellContext`n, 
          Blank[]]][
         Pattern[$CellContext`d, 
          Blank[]]] := 
       Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
         For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
           TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
              Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
              
              BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
           Null]; {$CellContext`x, $CellContext`y}], $CellContext`MapHilbert[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := MapThread[{#, 
          $CellContext`d2xy[$CellContext`n][#2]}& , 
         Transpose[$CellContext`l]], $CellContext`h = {{
          Hue[{0.7}], {0, 1}}, {
          Hue[0.3999999999999999, 1, 1], {1, 1}}, {
          Hue[0.35, 1, 1], {1, 0}}, {
          Hue[0.44999999999999996`, 1, 1], {2, 0}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 1}}, {
          Hue[{1.2}], {2, 1}}, {
          Hue[{1.2}], {2, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 3}}, {
          Hue[0.35, 1, 1], {1, 3}}, {
          Hue[0.35, 1, 1], {1, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {0, 2}}, {
          Hue[0.35, 1, 1], {0, 3}}, {
          Hue[0.44999999999999996`, 1, 1], {0, 4}}, {
          Hue[{1.2}], {1, 4}}, {
          Hue[{1.2}], {1, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {0, 5}}, {
          Hue[{1.2}], {0, 6}}, {
          Hue[{1.2}], {0, 7}}, {
          Hue[{1.2}], {1, 7}}, {
          Hue[{1.2}], {1, 6}}, {
          Hue[{1.2}], {2, 6}}, {
          Hue[{1.2}], {2, 7}}, {
          Hue[{1.2}], {3, 7}}, {
          Hue[{1.2}], {3, 6}}, {
          Hue[{1.2}], {3, 5}}, {
          Hue[{1.2}], {2, 5}}, {
          Hue[0.35, 1, 1], {2, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 4}}, {
          Hue[0.44999999999999996`, 1, 1], {5, 4}}, {
          Hue[0.44999999999999996`, 1, 1], {5, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {4, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 6}}, {
          Hue[{1.2}], {4, 7}}, {
          Hue[{1.2}], {5, 7}}, {
          Hue[{1.2}], {5, 6}}, {
          Hue[0.5, 1, 1], {6, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 7}}, {
          Hue[{1.2}], {7, 7}}, {
          Hue[{1.2}], {7, 6}}, {
          Hue[{1.2}], {7, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {7, 4}}, {
          Hue[0.3999999999999999, 1, 1], {7, 3}}, {
          Hue[0.44999999999999996`, 1, 1], {7, 2}}, {
          Hue[0.5, 1, 1], {6, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 3}}, {
          Hue[0.5499999999999999, 1, 1], {5, 3}}, {
          Hue[0.35, 1, 1], {4, 3}}, {
          Hue[0.35, 1, 1], {4, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {5, 2}}, {
          Hue[0.35, 1, 1], {5, 1}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 1}}, {
          Hue[{1.2}], {4, 0}}, {
          Hue[{1.2}], {5, 0}}, {
          Hue[0.35, 1, 1], {6, 0}}, {
          Hue[0.5499999999999999, 1, 1], {6, 1}}, {
          Hue[0.3999999999999999, 1, 1], {7, 1}}, {
          Hue[0.5, 1, 1], {7, 0}}, {
          Hue[{0.7}], {0, 0}}}, $CellContext`arr = {{
          Hue[{0.7}], 
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[0.35, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.5499999999999999, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[0.35, 1, 1], 
          Hue[0.5499999999999999, 1, 1], 
          Hue[0.5, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.5, 1, 1], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.5, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}}, $CellContext`setarr[
         Pattern[$CellContext`col, 
          Blank[]], {
          Pattern[$CellContext`p1, 
           Blank[]], 
          Pattern[$CellContext`p2, 
           Blank[]]}] := (
        Part[$CellContext`arr, 1 + $CellContext`p1, 
          1 + $CellContext`p2] = $CellContext`col)}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.550615432727619*^9, 3.550615527697525*^9, 
  3.550615701362748*^9},
 CellID->774320898]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
The setup allows visualization of the Basins of attraction of a Boltzmann \
Machine given the number of units, 'N' in the network. The attractors of the \
network are mapped to colours in the 2-D space ((2 ^ N/2)  X  (2 ^ N/2)) in \
the  form of the Hilbert curve, so that attractors having low hamming \
distance are closer to each other even in the 2-D space and those with large \
hamming distances are farther apart.\[LineSeparator]Also, the lesser the \
difference in the colour, the lesser would be the hamming distance between \
two attractors, as a result of which we notice that local neighbours tend to \
have similar colours.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.550588592482718*^9, 3.550588617925722*^9}, {
   3.550588653697495*^9, 3.550588697134618*^9}, {3.550588786822461*^9, 
   3.55058878893262*^9}, {3.550588857741345*^9, 3.55058912910168*^9}, 
   3.5505966431415663`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 4, $CellContext`m$$ = 8, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 8, "Number Of Units : N "}, 4, 8, 2}, {{
       Hold[$CellContext`k$$], 4, "Random Weight Matrix"}, 1, 5, 1}}, 
    Typeset`size$$ = {480., {190., 194.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`m$898509$$ = 0, $CellContext`k$898510$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 4, $CellContext`m$$ = 8}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$898509$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$898510$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`Drawing[$CellContext`m$$, $CellContext`k$$], 
      "Specifications" :> {{{$CellContext`m$$, 8, "Number Of Units : N "}, 4, 
         8, 2, Appearance -> 
         "Labeled"}, {{$CellContext`k$$, 4, "Random Weight Matrix"}, 1, 5, 1, 
         Appearance -> "Labeled"}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{523., {246., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`Drawing[
         Pattern[N, 
          Blank[]]] := 
       Module[{}, RandomSeed[1]; $CellContext`W = RandomReal[{-100, 
             Plus[100]}, {2 N, 2 N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, 2 N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[10, 2 N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - 
                Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              120}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; 
         Length[$CellContext`basins]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[2 N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[(Flatten[
               Position[$CellContext`att, $CellContext`l]] - 1.)/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^N], {
            1}]; $CellContext`arr = 
          Array[0, {2^N, 2^N}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`Drawing[
         Pattern[N, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{}, 
         SeedRandom[$CellContext`k]; $CellContext`W = RandomReal[{-10, 
             Plus[10]}, {N, N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[4, N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              100}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[ReplaceAll[Flatten[
                Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k1, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k1}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^(N/2)], {
            1}]; $CellContext`arr = 
          Array[0, {2^(N/2), 2^(N/2)}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`W = {{
         0, 8.760312395899067, -3.115008213430496, -2.4046992076033895`, 
          10.38004092676848, 
          2.387096154037163, -12.049383607927357`, -10.236951426796601`}, {
         8.760312395899067, 0, 2.119302660729854, -0.8728111092203292, 
          3.751245513819132, -14.946046588241181`, 12.30983912752044, 
          1.5230832450806808`}, {-3.115008213430496, 2.119302660729854, 0, 
          3.1888768282588558`, -1.6187587138407409`, 0.22569792529586152`, 
          9.382241070978871, 
          0.9990694334999226}, {-2.4046992076033895`, -0.8728111092203292, 
          3.1888768282588558`, 0, 9.883215442325024, 0.4790399284614715, 
          9.115321374233318, -16.222693171735695`}, {
         10.38004092676848, 3.751245513819132, -1.6187587138407409`, 
          9.883215442325024, 0, -11.74458860290471, 1.2974683638438798`, 
          4.6883863983617395`}, {
         2.387096154037163, -14.946046588241181`, 0.22569792529586152`, 
          0.4790399284614715, -11.74458860290471, 
          0, -8.482855080200231, -6.3633827962889775`}, {-12.049383607927357`,
           12.30983912752044, 9.382241070978871, 9.115321374233318, 
          1.2974683638438798`, -8.482855080200231, 0, 
          6.240246447787484}, {-10.236951426796601`, 1.5230832450806808`, 
          0.9990694334999226, -16.222693171735695`, 
          4.6883863983617395`, -6.3633827962889775`, 6.240246447787484, 
          0}}, $CellContext`theta = {3.604623687411376, 0.132766769093986, 
        3.089899823340004, 0.6175605730745026, 0.4016988622423323, 
        0.8128288401954968, 3.546845955280383, 
        2.563481876004311}, $CellContext`Energy[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Dot[$CellContext`\[Theta], $CellContext`s] - 
        Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
        2, $CellContext`UpdateState[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
            RandomInteger[{1, 
              Length[$CellContext`s]}]]}, 
         If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]], \
$CellContext`graycode[
         Pattern[$CellContext`n, 
          Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
         Map[BitXor[#, 
           Floor[#/2]]& , 
          Range[0, 2^$CellContext`n - 1]]], $CellContext`Converge2[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := 
       Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
          Length[$CellContext`state], $CellContext`newstate, $CellContext`i, \
$CellContext`energy, $CellContext`newenergy}, $CellContext`energy = 
          Dot[$CellContext`\[Theta], $CellContext`state] - 
           Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
         Do[$CellContext`i = 
            RandomInteger[{
              1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
           Part[$CellContext`newstate, $CellContext`i] = 
            1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
            Dot[$CellContext`\[Theta], $CellContext`newstate] - 
             Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
           If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
           100}]; $CellContext`state2], $CellContext`FindAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Tally[
         Table[
          $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
           10}]], $CellContext`FindBasins[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Map[{
          $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
         $CellContext`graycode[
          
          Length[$CellContext`\[Theta]]]], $CellContext`basins = {{{{{0, 0, 0,
             0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {0, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {0, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {0, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {1, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {1, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {1, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {1, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 4}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            6}}, {1, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {1, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {1, 0, 0, 0, 0, 0, 0, 0}}}, $CellContext`nbrs[
         Pattern[$CellContext`state, 
          Blank[]]] := Table[
         ReplacePart[$CellContext`state, $CellContext`j -> 
          1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
          Length[$CellContext`state]}], $CellContext`MinimumQ[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Min[
          Map[
           $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
           $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], $CellContext`AllAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Select[
         Tuples[{0, 1}, 
          Length[$CellContext`\[Theta]]], 
         $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]], \
$CellContext`att1 = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 
        0}}, $CellContext`att = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 
        1, 0}}, $CellContext`blend[{
          Pattern[$CellContext`x, 
           Blank[]]}, {
          Blank[]}] := $CellContext`x, $CellContext`blend[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := 
       Blend[$CellContext`a, $CellContext`b], $CellContext`colourmap[
         Pattern[$CellContext`l, 
          Blank[]]] := Hue[ReplaceAll[Flatten[
             Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
         Length[$CellContext`att]], $CellContext`weightedcolour[
         Pattern[$CellContext`l, 
          Blank[]]] := $CellContext`blend[
         Map[$CellContext`colourmap, 
          Part[$CellContext`l, All, 1]], 
         Part[$CellContext`l, All, 2]], $CellContext`Indexpos[
         Pattern[$CellContext`k1, 
          Blank[]]][{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           
           Blank[]]}] := {$CellContext`a, $CellContext`k1}, \
$CellContext`PutIndex[
         Pattern[$CellContext`lis, 
          Blank[]]] := 
       Module[{$CellContext`l = {}}, 
         For[$CellContext`p = 1, $CellContext`p <= Length[$CellContext`lis], 
           Increment[$CellContext`p], 
           AppendTo[$CellContext`l, 
            $CellContext`Indexpos[$CellContext`p][
             
             Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l], \
$CellContext`p = 257, $CellContext`rot[
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`y, 
          Blank[]], 
         Pattern[$CellContext`rx, 
          Blank[]], 
         Pattern[$CellContext`ry, 
          Blank[]]] := 
       Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
         If[$CellContext`ry == 0, 
           If[$CellContext`rx == 
             1, $CellContext`x1 = $CellContext`s - 
               1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
               1 - $CellContext`y; 
             Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
           Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}], $CellContext`d2xy[
         Pattern[$CellContext`n, 
          Blank[]]][
         Pattern[$CellContext`d, 
          Blank[]]] := 
       Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
         For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
           TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
              Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
              
              BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
           Null]; {$CellContext`x, $CellContext`y}], $CellContext`MapHilbert[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := MapThread[{#, 
          $CellContext`d2xy[$CellContext`n][#2]}& , 
         Transpose[$CellContext`l]], $CellContext`h = {{
          Hue[{0.7}], {1, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 1}}, {
          Hue[{1.2}], {0, 1}}, {
          Hue[0.3999999999999999, 1, 1], {0, 2}}, {
          Hue[0.3999999999999999, 1, 1], {0, 3}}, {
          Hue[0.35, 1, 1], {1, 3}}, {
          Hue[0.44999999999999996`, 1, 1], {1, 2}}, {
          Hue[{0.7}], {2, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 1}}, {
          Hue[{1.2}], {2, 0}}, {
          Hue[{1.2}], {3, 0}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 0}}, {
          Hue[{1.2}], {4, 1}}, {
          Hue[{1.2}], {5, 1}}, {
          Hue[{1.2}], {5, 0}}, {
          Hue[{1.2}], {6, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 0}}, {
          Hue[{1.2}], {7, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 1}}, {
          Hue[{1.2}], {6, 2}}, {
          Hue[0.44999999999999996`, 1, 1], {7, 2}}, {
          Hue[0.35, 1, 1], {7, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {5, 3}}, {
          Hue[{1.2}], {5, 2}}, {
          Hue[{1.2}], {4, 2}}, {
          Hue[{1.2}], {4, 3}}, {
          Hue[0.35, 1, 1], {4, 4}}, {
          Hue[{1.2}], {4, 5}}, {
          Hue[{1.2}], {5, 5}}, {
          Hue[{1.2}], {5, 4}}, {
          Hue[{1.2}], {6, 4}}, {
          Hue[{1.2}], {7, 4}}, {
          Hue[{1.2}], {7, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 5}}, {
          Hue[{1.2}], {6, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 7}}, {
          Hue[{1.2}], {6, 7}}, {
          Hue[{1.2}], {5, 7}}, {
          Hue[{1.2}], {5, 6}}, {
          Hue[{1.2}], {4, 6}}, {
          Hue[{1.2}], {4, 7}}, {
          Hue[{1.2}], {3, 7}}, {
          Hue[{1.2}], {2, 7}}, {
          Hue[{1.2}], {2, 6}}, {
          Hue[{1.2}], {3, 6}}, {
          Hue[{1.2}], {3, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 4}}, {
          Hue[{1.2}], {2, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {1, 5}}, {
          Hue[0.35, 1, 1], {1, 4}}, {
          Hue[0.3999999999999999, 1, 1], {0, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 6}}, {
          Hue[{1.2}], {1, 6}}, {
          Hue[{1.2}], {1, 7}}, {
          Hue[{1.2}], {0, 7}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {0, 9}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 9}}, {
          Hue[{1.2}], {1, 8}}, {
          Hue[{1.2}], {2, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 8}}, {
          Hue[{1.2}], {3, 9}}, {
          Hue[{1.2}], {2, 9}}, {
          Hue[0.35, 1, 1], {2, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 10}}, {
          Hue[0.35, 1, 1], {3, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 11}}, {
          Hue[{1.2}], {1, 11}}, {
          Hue[{1.2}], {1, 10}}, {
          Hue[{1.2}], {0, 10}}, {
          Hue[{1.2}], {0, 11}}, {
          Hue[{1.2}], {0, 12}}, {
          Hue[{1.2}], {1, 12}}, {
          Hue[{1.2}], {1, 13}}, {
          Hue[{1.2}], {0, 13}}, {
          Hue[{1.2}], {0, 14}}, {
          Hue[{1.2}], {0, 15}}, {
          Hue[{1.2}], {1, 15}}, {
          Hue[{1.2}], {1, 14}}, {
          Hue[{1.2}], {2, 14}}, {
          Hue[{1.2}], {2, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 15}}, {
          Hue[{1.2}], {3, 14}}, {
          Hue[{1.2}], {3, 13}}, {
          Hue[{1.2}], {2, 13}}, {
          Hue[{1.2}], {2, 12}}, {
          Hue[{1.2}], {3, 12}}, {
          Hue[{1.2}], {4, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 12}}, {
          Hue[{1.2}], {5, 13}}, {
          Hue[{1.2}], {4, 13}}, {
          Hue[{1.2}], {4, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {4, 15}}, {
          Hue[{1.2}], {5, 15}}, {
          Hue[{1.2}], {5, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 15}}, {
          Hue[{1.2}], {7, 14}}, {
          Hue[{1.2}], {7, 13}}, {
          Hue[{1.2}], {6, 13}}, {
          Hue[{1.2}], {6, 12}}, {
          Hue[{1.2}], {7, 12}}, {
          Hue[{1.2}], {7, 11}}, {
          Hue[{1.2}], {7, 10}}, {
          Hue[{1.2}], {6, 10}}, {
          Hue[{1.2}], {6, 11}}, {
          Hue[{1.2}], {5, 11}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 11}}, {
          Hue[{1.2}], {4, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 10}}, {
          Hue[0.35, 1, 1], {5, 9}}, {
          Hue[0.35, 1, 1], {4, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {4, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 8}}, {
          Hue[{1.2}], {6, 9}}, {
          Hue[{1.2}], {7, 9}}, {
          Hue[0.29999999999999993`, 1, 1], {7, 8}}, {
          Hue[0.35, 1, 1], {8, 8}}, {
          Hue[{1.2}], {8, 9}}, {
          Hue[{1.2}], {9, 9}}, {
          Hue[{1.2}], {9, 8}}, {
          Hue[{1.2}], {10, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 8}}, {
          Hue[{1.2}], {11, 9}}, {
          Hue[0.35, 1, 1], {10, 9}}, {
          Hue[0.35, 1, 1], {10, 10}}, {
          Hue[{1.2}], {11, 10}}, {
          Hue[{1.2}], {11, 11}}, {
          Hue[{1.2}], {10, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 11}}, {
          Hue[{1.2}], {9, 10}}, {
          Hue[{1.2}], {8, 10}}, {
          Hue[{1.2}], {8, 11}}, {
          Hue[{1.2}], {8, 12}}, {
          Hue[{1.2}], {9, 12}}, {
          Hue[{1.2}], {9, 13}}, {
          Hue[{1.2}], {8, 13}}, {
          Hue[{1.2}], {8, 14}}, {
          Hue[{1.2}], {8, 15}}, {
          Hue[{1.2}], {9, 15}}, {
          Hue[{1.2}], {9, 14}}, {
          Hue[{1.2}], {10, 14}}, {
          Hue[{1.2}], {10, 15}}, {
          Hue[{1.2}], {11, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {11, 13}}, {
          Hue[{1.2}], {10, 13}}, {
          Hue[{1.2}], {10, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 12}}, {
          Hue[{1.2}], {12, 12}}, {
          Hue[{1.2}], {13, 12}}, {
          Hue[{1.2}], {13, 13}}, {
          Hue[{1.2}], {12, 13}}, {
          Hue[{1.2}], {12, 14}}, {
          Hue[{1.2}], {12, 15}}, {
          Hue[{1.2}], {13, 15}}, {
          Hue[{1.2}], {13, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 14}}, {
          Hue[{1.2}], {14, 15}}, {
          Hue[{1.2}], {15, 15}}, {
          Hue[{1.2}], {15, 14}}, {
          Hue[{1.2}], {15, 13}}, {
          Hue[{1.2}], {14, 13}}, {
          Hue[{1.2}], {14, 12}}, {
          Hue[{1.2}], {15, 12}}, {
          Hue[{1.2}], {15, 11}}, {
          Hue[{1.2}], {15, 10}}, {
          Hue[{1.2}], {14, 10}}, {
          Hue[{1.2}], {14, 11}}, {
          Hue[{1.2}], {13, 11}}, {
          Hue[{1.2}], {12, 11}}, {
          Hue[{1.2}], {12, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {12, 9}}, {
          Hue[{1.2}], {12, 8}}, {
          Hue[{1.2}], {13, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 8}}, {
          Hue[{1.2}], {14, 9}}, {
          Hue[{1.2}], {15, 9}}, {
          Hue[{1.2}], {15, 8}}, {
          Hue[{1.2}], {15, 7}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 7}}, {
          Hue[{1.2}], {14, 6}}, {
          Hue[{1.2}], {15, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 5}}, {
          Hue[{1.2}], {15, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 5}}, {
          Hue[0.3999999999999999, 1, 1], {13, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {13, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 5}}, {
          Hue[{1.2}], {12, 6}}, {
          Hue[{1.2}], {13, 6}}, {
          Hue[{1.2}], {13, 7}}, {
          Hue[{1.2}], {12, 7}}, {
          Hue[{1.2}], {11, 7}}, {
          Hue[{1.2}], {11, 6}}, {
          Hue[{1.2}], {10, 6}}, {
          Hue[{1.2}], {10, 7}}, {
          Hue[{1.2}], {9, 7}}, {
          Hue[{1.2}], {8, 7}}, {
          Hue[{1.2}], {8, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 6}}, {
          Hue[{1.2}], {9, 5}}, {
          Hue[0.35, 1, 1], {8, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 4}}, {
          Hue[{1.2}], {9, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 4}}, {
          Hue[{1.2}], {10, 5}}, {
          Hue[{1.2}], {11, 5}}, {
          Hue[{1.2}], {11, 4}}, {
          Hue[0.35, 1, 1], {11, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 2}}, {
          Hue[{1.2}], {10, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 3}}, {
          Hue[{1.2}], {9, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 2}}, {
          Hue[0.3999999999999999, 1, 1], {9, 2}}, {
          Hue[0.35, 1, 1], {9, 1}}, {
          Hue[{1.2}], {8, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 0}}, {
          Hue[{1.2}], {9, 0}}, {
          Hue[{1.2}], {10, 0}}, {
          Hue[{1.2}], {10, 1}}, {
          Hue[{1.2}], {11, 1}}, {
          Hue[{1.2}], {11, 0}}, {
          Hue[{1.2}], {12, 0}}, {
          Hue[{1.2}], {13, 0}}, {
          Hue[{1.2}], {13, 1}}, {
          Hue[{1.2}], {12, 1}}, {
          Hue[{1.2}], {12, 2}}, {
          Hue[0.35, 1, 1], {12, 3}}, {
          Hue[{1.2}], {13, 3}}, {
          Hue[0.3999999999999999, 1, 1], {13, 2}}, {
          Hue[0.5, 1, 1], {14, 2}}, {
          Hue[{0.7}], {14, 3}}, {
          Hue[0.35, 1, 1], {15, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {15, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 1}}, {
          Hue[{1.2}], {14, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 0}}, {
          Hue[0.44999999999999996`, 1, 1], {0, 0}}}, $CellContext`arr = {{
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{0.7}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.5, 1, 1], 
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}}, $CellContext`setarr[
         Pattern[$CellContext`col, 
          Blank[]], {
          Pattern[$CellContext`p1, 
           Blank[]], 
          Pattern[$CellContext`p2, 
           Blank[]]}] := (
        Part[$CellContext`arr, 1 + $CellContext`p1, 
          1 + $CellContext`p2] = $CellContext`col)}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->48551271],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "wrsym"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Symbol \[NoBreak]\\!\\(AspectRatio\\)\[NoBreak] is \
Protected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/wrsym\\\", ButtonNote -> \
\\\"Set::wrsym\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.550615616467271*^9},
 CellID->1646441797],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ArrayPlot", "::", "argt"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(ArrayPlot\\)\[NoBreak] called with \
\[NoBreak]\\!\\(3\\)\[NoBreak] arguments; \[NoBreak]\\!\\(0\\)\[NoBreak] or \
\[NoBreak]\\!\\(1\\)\[NoBreak] arguments are expected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/argt\\\", \
ButtonNote -> \\\"ArrayPlot::argt\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.550615616469516*^9},
 CellID->1420490584]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 4, $CellContext`m$$ = 8, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 8, "Number Of Units : N "}, 4, 8, 2}, {{
       Hold[$CellContext`k$$], 4, "Random Weight Matrix"}, 1, 5, 1}}, 
    Typeset`size$$ = {480., {190., 194.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`m$898509$$ = 0, $CellContext`k$898510$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 4, $CellContext`m$$ = 8}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$898509$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$898510$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`Drawing[$CellContext`m$$, $CellContext`k$$], 
      "Specifications" :> {{{$CellContext`m$$, 8, "Number Of Units : N "}, 4, 
         8, 2, Appearance -> 
         "Labeled"}, {{$CellContext`k$$, 4, "Random Weight Matrix"}, 1, 5, 1, 
         Appearance -> "Labeled"}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{523., {246., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`Drawing[
         Pattern[N, 
          Blank[]]] := 
       Module[{}, RandomSeed[1]; $CellContext`W = RandomReal[{-100, 
             Plus[100]}, {2 N, 2 N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, 2 N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[10, 2 N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - 
                Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              120}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; 
         Length[$CellContext`basins]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[2 N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[(Flatten[
               Position[$CellContext`att, $CellContext`l]] - 1.)/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^N], {
            1}]; $CellContext`arr = 
          Array[0, {2^N, 2^N}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`Drawing[
         Pattern[N, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{}, 
         SeedRandom[$CellContext`k]; $CellContext`W = RandomReal[{-10, 
             Plus[10]}, {N, N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[4, N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              100}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[ReplaceAll[Flatten[
                Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k1, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k1}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^(N/2)], {
            1}]; $CellContext`arr = 
          Array[0, {2^(N/2), 2^(N/2)}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`W = {{
         0, 8.760312395899067, -3.115008213430496, -2.4046992076033895`, 
          10.38004092676848, 
          2.387096154037163, -12.049383607927357`, -10.236951426796601`}, {
         8.760312395899067, 0, 2.119302660729854, -0.8728111092203292, 
          3.751245513819132, -14.946046588241181`, 12.30983912752044, 
          1.5230832450806808`}, {-3.115008213430496, 2.119302660729854, 0, 
          3.1888768282588558`, -1.6187587138407409`, 0.22569792529586152`, 
          9.382241070978871, 
          0.9990694334999226}, {-2.4046992076033895`, -0.8728111092203292, 
          3.1888768282588558`, 0, 9.883215442325024, 0.4790399284614715, 
          9.115321374233318, -16.222693171735695`}, {
         10.38004092676848, 3.751245513819132, -1.6187587138407409`, 
          9.883215442325024, 0, -11.74458860290471, 1.2974683638438798`, 
          4.6883863983617395`}, {
         2.387096154037163, -14.946046588241181`, 0.22569792529586152`, 
          0.4790399284614715, -11.74458860290471, 
          0, -8.482855080200231, -6.3633827962889775`}, {-12.049383607927357`,
           12.30983912752044, 9.382241070978871, 9.115321374233318, 
          1.2974683638438798`, -8.482855080200231, 0, 
          6.240246447787484}, {-10.236951426796601`, 1.5230832450806808`, 
          0.9990694334999226, -16.222693171735695`, 
          4.6883863983617395`, -6.3633827962889775`, 6.240246447787484, 
          0}}, $CellContext`theta = {3.604623687411376, 0.132766769093986, 
        3.089899823340004, 0.6175605730745026, 0.4016988622423323, 
        0.8128288401954968, 3.546845955280383, 
        2.563481876004311}, $CellContext`Energy[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Dot[$CellContext`\[Theta], $CellContext`s] - 
        Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
        2, $CellContext`UpdateState[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
            RandomInteger[{1, 
              Length[$CellContext`s]}]]}, 
         If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]], \
$CellContext`graycode[
         Pattern[$CellContext`n, 
          Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
         Map[BitXor[#, 
           Floor[#/2]]& , 
          Range[0, 2^$CellContext`n - 1]]], $CellContext`Converge2[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := 
       Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
          Length[$CellContext`state], $CellContext`newstate, $CellContext`i, \
$CellContext`energy, $CellContext`newenergy}, $CellContext`energy = 
          Dot[$CellContext`\[Theta], $CellContext`state] - 
           Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
         Do[$CellContext`i = 
            RandomInteger[{
              1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
           Part[$CellContext`newstate, $CellContext`i] = 
            1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
            Dot[$CellContext`\[Theta], $CellContext`newstate] - 
             Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
           If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
           100}]; $CellContext`state2], $CellContext`FindAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Tally[
         Table[
          $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
           10}]], $CellContext`FindBasins[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Map[{
          $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
         $CellContext`graycode[
          
          Length[$CellContext`\[Theta]]]], $CellContext`basins = {{{{{0, 0, 0,
             0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {0, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {0, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {0, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {1, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {1, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {1, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {1, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 4}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            6}}, {1, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {1, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {1, 0, 0, 0, 0, 0, 0, 0}}}, $CellContext`nbrs[
         Pattern[$CellContext`state, 
          Blank[]]] := Table[
         ReplacePart[$CellContext`state, $CellContext`j -> 
          1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
          Length[$CellContext`state]}], $CellContext`MinimumQ[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Min[
          Map[
           $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
           $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], $CellContext`AllAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Select[
         Tuples[{0, 1}, 
          Length[$CellContext`\[Theta]]], 
         $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]], \
$CellContext`att1 = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 
        0}}, $CellContext`att = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 
        1, 0}}, $CellContext`blend[{
          Pattern[$CellContext`x, 
           Blank[]]}, {
          Blank[]}] := $CellContext`x, $CellContext`blend[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := 
       Blend[$CellContext`a, $CellContext`b], $CellContext`colourmap[
         Pattern[$CellContext`l, 
          Blank[]]] := Hue[ReplaceAll[Flatten[
             Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
         Length[$CellContext`att]], $CellContext`weightedcolour[
         Pattern[$CellContext`l, 
          Blank[]]] := $CellContext`blend[
         Map[$CellContext`colourmap, 
          Part[$CellContext`l, All, 1]], 
         Part[$CellContext`l, All, 2]], $CellContext`Indexpos[
         Pattern[$CellContext`k1, 
          Blank[]]][{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           
           Blank[]]}] := {$CellContext`a, $CellContext`k1}, \
$CellContext`PutIndex[
         Pattern[$CellContext`lis, 
          Blank[]]] := 
       Module[{$CellContext`l = {}}, 
         For[$CellContext`p = 1, $CellContext`p <= Length[$CellContext`lis], 
           Increment[$CellContext`p], 
           AppendTo[$CellContext`l, 
            $CellContext`Indexpos[$CellContext`p][
             
             Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l], \
$CellContext`p = 257, $CellContext`rot[
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`y, 
          Blank[]], 
         Pattern[$CellContext`rx, 
          Blank[]], 
         Pattern[$CellContext`ry, 
          Blank[]]] := 
       Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
         If[$CellContext`ry == 0, 
           If[$CellContext`rx == 
             1, $CellContext`x1 = $CellContext`s - 
               1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
               1 - $CellContext`y; 
             Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
           Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}], $CellContext`d2xy[
         Pattern[$CellContext`n, 
          Blank[]]][
         Pattern[$CellContext`d, 
          Blank[]]] := 
       Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
         For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
           TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
              Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
              
              BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
           Null]; {$CellContext`x, $CellContext`y}], $CellContext`MapHilbert[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := MapThread[{#, 
          $CellContext`d2xy[$CellContext`n][#2]}& , 
         Transpose[$CellContext`l]], $CellContext`h = {{
          Hue[{0.7}], {1, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 1}}, {
          Hue[{1.2}], {0, 1}}, {
          Hue[0.3999999999999999, 1, 1], {0, 2}}, {
          Hue[0.3999999999999999, 1, 1], {0, 3}}, {
          Hue[0.35, 1, 1], {1, 3}}, {
          Hue[0.44999999999999996`, 1, 1], {1, 2}}, {
          Hue[{0.7}], {2, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 1}}, {
          Hue[{1.2}], {2, 0}}, {
          Hue[{1.2}], {3, 0}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 0}}, {
          Hue[{1.2}], {4, 1}}, {
          Hue[{1.2}], {5, 1}}, {
          Hue[{1.2}], {5, 0}}, {
          Hue[{1.2}], {6, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 0}}, {
          Hue[{1.2}], {7, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 1}}, {
          Hue[{1.2}], {6, 2}}, {
          Hue[0.44999999999999996`, 1, 1], {7, 2}}, {
          Hue[0.35, 1, 1], {7, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {5, 3}}, {
          Hue[{1.2}], {5, 2}}, {
          Hue[{1.2}], {4, 2}}, {
          Hue[{1.2}], {4, 3}}, {
          Hue[0.35, 1, 1], {4, 4}}, {
          Hue[{1.2}], {4, 5}}, {
          Hue[{1.2}], {5, 5}}, {
          Hue[{1.2}], {5, 4}}, {
          Hue[{1.2}], {6, 4}}, {
          Hue[{1.2}], {7, 4}}, {
          Hue[{1.2}], {7, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 5}}, {
          Hue[{1.2}], {6, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 7}}, {
          Hue[{1.2}], {6, 7}}, {
          Hue[{1.2}], {5, 7}}, {
          Hue[{1.2}], {5, 6}}, {
          Hue[{1.2}], {4, 6}}, {
          Hue[{1.2}], {4, 7}}, {
          Hue[{1.2}], {3, 7}}, {
          Hue[{1.2}], {2, 7}}, {
          Hue[{1.2}], {2, 6}}, {
          Hue[{1.2}], {3, 6}}, {
          Hue[{1.2}], {3, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 4}}, {
          Hue[{1.2}], {2, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {1, 5}}, {
          Hue[0.35, 1, 1], {1, 4}}, {
          Hue[0.3999999999999999, 1, 1], {0, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 6}}, {
          Hue[{1.2}], {1, 6}}, {
          Hue[{1.2}], {1, 7}}, {
          Hue[{1.2}], {0, 7}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {0, 9}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 9}}, {
          Hue[{1.2}], {1, 8}}, {
          Hue[{1.2}], {2, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 8}}, {
          Hue[{1.2}], {3, 9}}, {
          Hue[{1.2}], {2, 9}}, {
          Hue[0.35, 1, 1], {2, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 10}}, {
          Hue[0.35, 1, 1], {3, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 11}}, {
          Hue[{1.2}], {1, 11}}, {
          Hue[{1.2}], {1, 10}}, {
          Hue[{1.2}], {0, 10}}, {
          Hue[{1.2}], {0, 11}}, {
          Hue[{1.2}], {0, 12}}, {
          Hue[{1.2}], {1, 12}}, {
          Hue[{1.2}], {1, 13}}, {
          Hue[{1.2}], {0, 13}}, {
          Hue[{1.2}], {0, 14}}, {
          Hue[{1.2}], {0, 15}}, {
          Hue[{1.2}], {1, 15}}, {
          Hue[{1.2}], {1, 14}}, {
          Hue[{1.2}], {2, 14}}, {
          Hue[{1.2}], {2, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 15}}, {
          Hue[{1.2}], {3, 14}}, {
          Hue[{1.2}], {3, 13}}, {
          Hue[{1.2}], {2, 13}}, {
          Hue[{1.2}], {2, 12}}, {
          Hue[{1.2}], {3, 12}}, {
          Hue[{1.2}], {4, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 12}}, {
          Hue[{1.2}], {5, 13}}, {
          Hue[{1.2}], {4, 13}}, {
          Hue[{1.2}], {4, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {4, 15}}, {
          Hue[{1.2}], {5, 15}}, {
          Hue[{1.2}], {5, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 15}}, {
          Hue[{1.2}], {7, 14}}, {
          Hue[{1.2}], {7, 13}}, {
          Hue[{1.2}], {6, 13}}, {
          Hue[{1.2}], {6, 12}}, {
          Hue[{1.2}], {7, 12}}, {
          Hue[{1.2}], {7, 11}}, {
          Hue[{1.2}], {7, 10}}, {
          Hue[{1.2}], {6, 10}}, {
          Hue[{1.2}], {6, 11}}, {
          Hue[{1.2}], {5, 11}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 11}}, {
          Hue[{1.2}], {4, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 10}}, {
          Hue[0.35, 1, 1], {5, 9}}, {
          Hue[0.35, 1, 1], {4, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {4, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 8}}, {
          Hue[{1.2}], {6, 9}}, {
          Hue[{1.2}], {7, 9}}, {
          Hue[0.29999999999999993`, 1, 1], {7, 8}}, {
          Hue[0.35, 1, 1], {8, 8}}, {
          Hue[{1.2}], {8, 9}}, {
          Hue[{1.2}], {9, 9}}, {
          Hue[{1.2}], {9, 8}}, {
          Hue[{1.2}], {10, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 8}}, {
          Hue[{1.2}], {11, 9}}, {
          Hue[0.35, 1, 1], {10, 9}}, {
          Hue[0.35, 1, 1], {10, 10}}, {
          Hue[{1.2}], {11, 10}}, {
          Hue[{1.2}], {11, 11}}, {
          Hue[{1.2}], {10, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 11}}, {
          Hue[{1.2}], {9, 10}}, {
          Hue[{1.2}], {8, 10}}, {
          Hue[{1.2}], {8, 11}}, {
          Hue[{1.2}], {8, 12}}, {
          Hue[{1.2}], {9, 12}}, {
          Hue[{1.2}], {9, 13}}, {
          Hue[{1.2}], {8, 13}}, {
          Hue[{1.2}], {8, 14}}, {
          Hue[{1.2}], {8, 15}}, {
          Hue[{1.2}], {9, 15}}, {
          Hue[{1.2}], {9, 14}}, {
          Hue[{1.2}], {10, 14}}, {
          Hue[{1.2}], {10, 15}}, {
          Hue[{1.2}], {11, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {11, 13}}, {
          Hue[{1.2}], {10, 13}}, {
          Hue[{1.2}], {10, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 12}}, {
          Hue[{1.2}], {12, 12}}, {
          Hue[{1.2}], {13, 12}}, {
          Hue[{1.2}], {13, 13}}, {
          Hue[{1.2}], {12, 13}}, {
          Hue[{1.2}], {12, 14}}, {
          Hue[{1.2}], {12, 15}}, {
          Hue[{1.2}], {13, 15}}, {
          Hue[{1.2}], {13, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 14}}, {
          Hue[{1.2}], {14, 15}}, {
          Hue[{1.2}], {15, 15}}, {
          Hue[{1.2}], {15, 14}}, {
          Hue[{1.2}], {15, 13}}, {
          Hue[{1.2}], {14, 13}}, {
          Hue[{1.2}], {14, 12}}, {
          Hue[{1.2}], {15, 12}}, {
          Hue[{1.2}], {15, 11}}, {
          Hue[{1.2}], {15, 10}}, {
          Hue[{1.2}], {14, 10}}, {
          Hue[{1.2}], {14, 11}}, {
          Hue[{1.2}], {13, 11}}, {
          Hue[{1.2}], {12, 11}}, {
          Hue[{1.2}], {12, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {12, 9}}, {
          Hue[{1.2}], {12, 8}}, {
          Hue[{1.2}], {13, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 8}}, {
          Hue[{1.2}], {14, 9}}, {
          Hue[{1.2}], {15, 9}}, {
          Hue[{1.2}], {15, 8}}, {
          Hue[{1.2}], {15, 7}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 7}}, {
          Hue[{1.2}], {14, 6}}, {
          Hue[{1.2}], {15, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 5}}, {
          Hue[{1.2}], {15, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 5}}, {
          Hue[0.3999999999999999, 1, 1], {13, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {13, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 5}}, {
          Hue[{1.2}], {12, 6}}, {
          Hue[{1.2}], {13, 6}}, {
          Hue[{1.2}], {13, 7}}, {
          Hue[{1.2}], {12, 7}}, {
          Hue[{1.2}], {11, 7}}, {
          Hue[{1.2}], {11, 6}}, {
          Hue[{1.2}], {10, 6}}, {
          Hue[{1.2}], {10, 7}}, {
          Hue[{1.2}], {9, 7}}, {
          Hue[{1.2}], {8, 7}}, {
          Hue[{1.2}], {8, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 6}}, {
          Hue[{1.2}], {9, 5}}, {
          Hue[0.35, 1, 1], {8, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 4}}, {
          Hue[{1.2}], {9, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 4}}, {
          Hue[{1.2}], {10, 5}}, {
          Hue[{1.2}], {11, 5}}, {
          Hue[{1.2}], {11, 4}}, {
          Hue[0.35, 1, 1], {11, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 2}}, {
          Hue[{1.2}], {10, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 3}}, {
          Hue[{1.2}], {9, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 2}}, {
          Hue[0.3999999999999999, 1, 1], {9, 2}}, {
          Hue[0.35, 1, 1], {9, 1}}, {
          Hue[{1.2}], {8, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 0}}, {
          Hue[{1.2}], {9, 0}}, {
          Hue[{1.2}], {10, 0}}, {
          Hue[{1.2}], {10, 1}}, {
          Hue[{1.2}], {11, 1}}, {
          Hue[{1.2}], {11, 0}}, {
          Hue[{1.2}], {12, 0}}, {
          Hue[{1.2}], {13, 0}}, {
          Hue[{1.2}], {13, 1}}, {
          Hue[{1.2}], {12, 1}}, {
          Hue[{1.2}], {12, 2}}, {
          Hue[0.35, 1, 1], {12, 3}}, {
          Hue[{1.2}], {13, 3}}, {
          Hue[0.3999999999999999, 1, 1], {13, 2}}, {
          Hue[0.5, 1, 1], {14, 2}}, {
          Hue[{0.7}], {14, 3}}, {
          Hue[0.35, 1, 1], {15, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {15, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 1}}, {
          Hue[{1.2}], {14, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 0}}, {
          Hue[0.44999999999999996`, 1, 1], {0, 0}}}, $CellContext`arr = {{
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{0.7}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.5, 1, 1], 
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}}, $CellContext`setarr[
         Pattern[$CellContext`col, 
          Blank[]], {
          Pattern[$CellContext`p1, 
           Blank[]], 
          Pattern[$CellContext`p2, 
           Blank[]]}] := (
        Part[$CellContext`arr, 1 + $CellContext`p1, 
          1 + $CellContext`p2] = $CellContext`col)}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->263932026],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 5, $CellContext`m$$ = 8, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 8, "Number Of Units : N "}, 4, 8, 2}, {{
       Hold[$CellContext`k$$], 4, "Random Weight Matrix"}, 1, 5, 1}}, 
    Typeset`size$$ = {480., {190., 194.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`m$898509$$ = 0, $CellContext`k$898510$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 4, $CellContext`m$$ = 8}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$898509$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$898510$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`Drawing[$CellContext`m$$, $CellContext`k$$], 
      "Specifications" :> {{{$CellContext`m$$, 8, "Number Of Units : N "}, 4, 
         8, 2, Appearance -> 
         "Labeled"}, {{$CellContext`k$$, 4, "Random Weight Matrix"}, 1, 5, 1, 
         Appearance -> "Labeled"}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{523., {246., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`Drawing[
         Pattern[N, 
          Blank[]]] := 
       Module[{}, RandomSeed[1]; $CellContext`W = RandomReal[{-100, 
             Plus[100]}, {2 N, 2 N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, 2 N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[10, 2 N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - 
                Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              120}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; 
         Length[$CellContext`basins]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[2 N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[(Flatten[
               Position[$CellContext`att, $CellContext`l]] - 1.)/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^N], {
            1}]; $CellContext`arr = 
          Array[0, {2^N, 2^N}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`Drawing[
         Pattern[N, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{}, 
         SeedRandom[$CellContext`k]; $CellContext`W = RandomReal[{-10, 
             Plus[10]}, {N, N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[4, N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              100}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[ReplaceAll[Flatten[
                Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k1, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k1}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^(N/2)], {
            1}]; $CellContext`arr = 
          Array[0, {2^(N/2), 2^(N/2)}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`W = {{
         0, 8.760312395899067, -3.115008213430496, -2.4046992076033895`, 
          10.38004092676848, 
          2.387096154037163, -12.049383607927357`, -10.236951426796601`}, {
         8.760312395899067, 0, 2.119302660729854, -0.8728111092203292, 
          3.751245513819132, -14.946046588241181`, 12.30983912752044, 
          1.5230832450806808`}, {-3.115008213430496, 2.119302660729854, 0, 
          3.1888768282588558`, -1.6187587138407409`, 0.22569792529586152`, 
          9.382241070978871, 
          0.9990694334999226}, {-2.4046992076033895`, -0.8728111092203292, 
          3.1888768282588558`, 0, 9.883215442325024, 0.4790399284614715, 
          9.115321374233318, -16.222693171735695`}, {
         10.38004092676848, 3.751245513819132, -1.6187587138407409`, 
          9.883215442325024, 0, -11.74458860290471, 1.2974683638438798`, 
          4.6883863983617395`}, {
         2.387096154037163, -14.946046588241181`, 0.22569792529586152`, 
          0.4790399284614715, -11.74458860290471, 
          0, -8.482855080200231, -6.3633827962889775`}, {-12.049383607927357`,
           12.30983912752044, 9.382241070978871, 9.115321374233318, 
          1.2974683638438798`, -8.482855080200231, 0, 
          6.240246447787484}, {-10.236951426796601`, 1.5230832450806808`, 
          0.9990694334999226, -16.222693171735695`, 
          4.6883863983617395`, -6.3633827962889775`, 6.240246447787484, 
          0}}, $CellContext`theta = {3.604623687411376, 0.132766769093986, 
        3.089899823340004, 0.6175605730745026, 0.4016988622423323, 
        0.8128288401954968, 3.546845955280383, 
        2.563481876004311}, $CellContext`Energy[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Dot[$CellContext`\[Theta], $CellContext`s] - 
        Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
        2, $CellContext`UpdateState[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
            RandomInteger[{1, 
              Length[$CellContext`s]}]]}, 
         If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]], \
$CellContext`graycode[
         Pattern[$CellContext`n, 
          Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
         Map[BitXor[#, 
           Floor[#/2]]& , 
          Range[0, 2^$CellContext`n - 1]]], $CellContext`Converge2[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := 
       Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
          Length[$CellContext`state], $CellContext`newstate, $CellContext`i, \
$CellContext`energy, $CellContext`newenergy}, $CellContext`energy = 
          Dot[$CellContext`\[Theta], $CellContext`state] - 
           Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
         Do[$CellContext`i = 
            RandomInteger[{
              1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
           Part[$CellContext`newstate, $CellContext`i] = 
            1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
            Dot[$CellContext`\[Theta], $CellContext`newstate] - 
             Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
           If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
           100}]; $CellContext`state2], $CellContext`FindAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Tally[
         Table[
          $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
           10}]], $CellContext`FindBasins[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Map[{
          $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
         $CellContext`graycode[
          
          Length[$CellContext`\[Theta]]]], $CellContext`basins = {{{{{0, 0, 0,
             0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {0, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {0, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {0, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {1, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {1, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {1, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {1, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 4}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            6}}, {1, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {1, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {1, 0, 0, 0, 0, 0, 0, 0}}}, $CellContext`nbrs[
         Pattern[$CellContext`state, 
          Blank[]]] := Table[
         ReplacePart[$CellContext`state, $CellContext`j -> 
          1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
          Length[$CellContext`state]}], $CellContext`MinimumQ[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Min[
          Map[
           $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
           $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], $CellContext`AllAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Select[
         Tuples[{0, 1}, 
          Length[$CellContext`\[Theta]]], 
         $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]], \
$CellContext`att1 = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 
        0}}, $CellContext`att = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 
        1, 0}}, $CellContext`blend[{
          Pattern[$CellContext`x, 
           Blank[]]}, {
          Blank[]}] := $CellContext`x, $CellContext`blend[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := 
       Blend[$CellContext`a, $CellContext`b], $CellContext`colourmap[
         Pattern[$CellContext`l, 
          Blank[]]] := Hue[ReplaceAll[Flatten[
             Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
         Length[$CellContext`att]], $CellContext`weightedcolour[
         Pattern[$CellContext`l, 
          Blank[]]] := $CellContext`blend[
         Map[$CellContext`colourmap, 
          Part[$CellContext`l, All, 1]], 
         Part[$CellContext`l, All, 2]], $CellContext`Indexpos[
         Pattern[$CellContext`k1, 
          Blank[]]][{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           
           Blank[]]}] := {$CellContext`a, $CellContext`k1}, \
$CellContext`PutIndex[
         Pattern[$CellContext`lis, 
          Blank[]]] := 
       Module[{$CellContext`l = {}}, 
         For[$CellContext`p = 1, $CellContext`p <= Length[$CellContext`lis], 
           Increment[$CellContext`p], 
           AppendTo[$CellContext`l, 
            $CellContext`Indexpos[$CellContext`p][
             
             Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l], \
$CellContext`p = 257, $CellContext`rot[
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`y, 
          Blank[]], 
         Pattern[$CellContext`rx, 
          Blank[]], 
         Pattern[$CellContext`ry, 
          Blank[]]] := 
       Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
         If[$CellContext`ry == 0, 
           If[$CellContext`rx == 
             1, $CellContext`x1 = $CellContext`s - 
               1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
               1 - $CellContext`y; 
             Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
           Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}], $CellContext`d2xy[
         Pattern[$CellContext`n, 
          Blank[]]][
         Pattern[$CellContext`d, 
          Blank[]]] := 
       Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
         For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
           TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
              Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
              
              BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
           Null]; {$CellContext`x, $CellContext`y}], $CellContext`MapHilbert[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := MapThread[{#, 
          $CellContext`d2xy[$CellContext`n][#2]}& , 
         Transpose[$CellContext`l]], $CellContext`h = {{
          Hue[{0.7}], {1, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 1}}, {
          Hue[{1.2}], {0, 1}}, {
          Hue[0.3999999999999999, 1, 1], {0, 2}}, {
          Hue[0.3999999999999999, 1, 1], {0, 3}}, {
          Hue[0.35, 1, 1], {1, 3}}, {
          Hue[0.44999999999999996`, 1, 1], {1, 2}}, {
          Hue[{0.7}], {2, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 1}}, {
          Hue[{1.2}], {2, 0}}, {
          Hue[{1.2}], {3, 0}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 0}}, {
          Hue[{1.2}], {4, 1}}, {
          Hue[{1.2}], {5, 1}}, {
          Hue[{1.2}], {5, 0}}, {
          Hue[{1.2}], {6, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 0}}, {
          Hue[{1.2}], {7, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 1}}, {
          Hue[{1.2}], {6, 2}}, {
          Hue[0.44999999999999996`, 1, 1], {7, 2}}, {
          Hue[0.35, 1, 1], {7, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {5, 3}}, {
          Hue[{1.2}], {5, 2}}, {
          Hue[{1.2}], {4, 2}}, {
          Hue[{1.2}], {4, 3}}, {
          Hue[0.35, 1, 1], {4, 4}}, {
          Hue[{1.2}], {4, 5}}, {
          Hue[{1.2}], {5, 5}}, {
          Hue[{1.2}], {5, 4}}, {
          Hue[{1.2}], {6, 4}}, {
          Hue[{1.2}], {7, 4}}, {
          Hue[{1.2}], {7, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 5}}, {
          Hue[{1.2}], {6, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 7}}, {
          Hue[{1.2}], {6, 7}}, {
          Hue[{1.2}], {5, 7}}, {
          Hue[{1.2}], {5, 6}}, {
          Hue[{1.2}], {4, 6}}, {
          Hue[{1.2}], {4, 7}}, {
          Hue[{1.2}], {3, 7}}, {
          Hue[{1.2}], {2, 7}}, {
          Hue[{1.2}], {2, 6}}, {
          Hue[{1.2}], {3, 6}}, {
          Hue[{1.2}], {3, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 4}}, {
          Hue[{1.2}], {2, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {1, 5}}, {
          Hue[0.35, 1, 1], {1, 4}}, {
          Hue[0.3999999999999999, 1, 1], {0, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 6}}, {
          Hue[{1.2}], {1, 6}}, {
          Hue[{1.2}], {1, 7}}, {
          Hue[{1.2}], {0, 7}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {0, 9}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 9}}, {
          Hue[{1.2}], {1, 8}}, {
          Hue[{1.2}], {2, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 8}}, {
          Hue[{1.2}], {3, 9}}, {
          Hue[{1.2}], {2, 9}}, {
          Hue[0.35, 1, 1], {2, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 10}}, {
          Hue[0.35, 1, 1], {3, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 11}}, {
          Hue[{1.2}], {1, 11}}, {
          Hue[{1.2}], {1, 10}}, {
          Hue[{1.2}], {0, 10}}, {
          Hue[{1.2}], {0, 11}}, {
          Hue[{1.2}], {0, 12}}, {
          Hue[{1.2}], {1, 12}}, {
          Hue[{1.2}], {1, 13}}, {
          Hue[{1.2}], {0, 13}}, {
          Hue[{1.2}], {0, 14}}, {
          Hue[{1.2}], {0, 15}}, {
          Hue[{1.2}], {1, 15}}, {
          Hue[{1.2}], {1, 14}}, {
          Hue[{1.2}], {2, 14}}, {
          Hue[{1.2}], {2, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 15}}, {
          Hue[{1.2}], {3, 14}}, {
          Hue[{1.2}], {3, 13}}, {
          Hue[{1.2}], {2, 13}}, {
          Hue[{1.2}], {2, 12}}, {
          Hue[{1.2}], {3, 12}}, {
          Hue[{1.2}], {4, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 12}}, {
          Hue[{1.2}], {5, 13}}, {
          Hue[{1.2}], {4, 13}}, {
          Hue[{1.2}], {4, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {4, 15}}, {
          Hue[{1.2}], {5, 15}}, {
          Hue[{1.2}], {5, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 15}}, {
          Hue[{1.2}], {7, 14}}, {
          Hue[{1.2}], {7, 13}}, {
          Hue[{1.2}], {6, 13}}, {
          Hue[{1.2}], {6, 12}}, {
          Hue[{1.2}], {7, 12}}, {
          Hue[{1.2}], {7, 11}}, {
          Hue[{1.2}], {7, 10}}, {
          Hue[{1.2}], {6, 10}}, {
          Hue[{1.2}], {6, 11}}, {
          Hue[{1.2}], {5, 11}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 11}}, {
          Hue[{1.2}], {4, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 10}}, {
          Hue[0.35, 1, 1], {5, 9}}, {
          Hue[0.35, 1, 1], {4, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {4, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 8}}, {
          Hue[{1.2}], {6, 9}}, {
          Hue[{1.2}], {7, 9}}, {
          Hue[0.29999999999999993`, 1, 1], {7, 8}}, {
          Hue[0.35, 1, 1], {8, 8}}, {
          Hue[{1.2}], {8, 9}}, {
          Hue[{1.2}], {9, 9}}, {
          Hue[{1.2}], {9, 8}}, {
          Hue[{1.2}], {10, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 8}}, {
          Hue[{1.2}], {11, 9}}, {
          Hue[0.35, 1, 1], {10, 9}}, {
          Hue[0.35, 1, 1], {10, 10}}, {
          Hue[{1.2}], {11, 10}}, {
          Hue[{1.2}], {11, 11}}, {
          Hue[{1.2}], {10, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 11}}, {
          Hue[{1.2}], {9, 10}}, {
          Hue[{1.2}], {8, 10}}, {
          Hue[{1.2}], {8, 11}}, {
          Hue[{1.2}], {8, 12}}, {
          Hue[{1.2}], {9, 12}}, {
          Hue[{1.2}], {9, 13}}, {
          Hue[{1.2}], {8, 13}}, {
          Hue[{1.2}], {8, 14}}, {
          Hue[{1.2}], {8, 15}}, {
          Hue[{1.2}], {9, 15}}, {
          Hue[{1.2}], {9, 14}}, {
          Hue[{1.2}], {10, 14}}, {
          Hue[{1.2}], {10, 15}}, {
          Hue[{1.2}], {11, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {11, 13}}, {
          Hue[{1.2}], {10, 13}}, {
          Hue[{1.2}], {10, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 12}}, {
          Hue[{1.2}], {12, 12}}, {
          Hue[{1.2}], {13, 12}}, {
          Hue[{1.2}], {13, 13}}, {
          Hue[{1.2}], {12, 13}}, {
          Hue[{1.2}], {12, 14}}, {
          Hue[{1.2}], {12, 15}}, {
          Hue[{1.2}], {13, 15}}, {
          Hue[{1.2}], {13, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 14}}, {
          Hue[{1.2}], {14, 15}}, {
          Hue[{1.2}], {15, 15}}, {
          Hue[{1.2}], {15, 14}}, {
          Hue[{1.2}], {15, 13}}, {
          Hue[{1.2}], {14, 13}}, {
          Hue[{1.2}], {14, 12}}, {
          Hue[{1.2}], {15, 12}}, {
          Hue[{1.2}], {15, 11}}, {
          Hue[{1.2}], {15, 10}}, {
          Hue[{1.2}], {14, 10}}, {
          Hue[{1.2}], {14, 11}}, {
          Hue[{1.2}], {13, 11}}, {
          Hue[{1.2}], {12, 11}}, {
          Hue[{1.2}], {12, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {12, 9}}, {
          Hue[{1.2}], {12, 8}}, {
          Hue[{1.2}], {13, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 8}}, {
          Hue[{1.2}], {14, 9}}, {
          Hue[{1.2}], {15, 9}}, {
          Hue[{1.2}], {15, 8}}, {
          Hue[{1.2}], {15, 7}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 7}}, {
          Hue[{1.2}], {14, 6}}, {
          Hue[{1.2}], {15, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 5}}, {
          Hue[{1.2}], {15, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 5}}, {
          Hue[0.3999999999999999, 1, 1], {13, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {13, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 5}}, {
          Hue[{1.2}], {12, 6}}, {
          Hue[{1.2}], {13, 6}}, {
          Hue[{1.2}], {13, 7}}, {
          Hue[{1.2}], {12, 7}}, {
          Hue[{1.2}], {11, 7}}, {
          Hue[{1.2}], {11, 6}}, {
          Hue[{1.2}], {10, 6}}, {
          Hue[{1.2}], {10, 7}}, {
          Hue[{1.2}], {9, 7}}, {
          Hue[{1.2}], {8, 7}}, {
          Hue[{1.2}], {8, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 6}}, {
          Hue[{1.2}], {9, 5}}, {
          Hue[0.35, 1, 1], {8, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 4}}, {
          Hue[{1.2}], {9, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 4}}, {
          Hue[{1.2}], {10, 5}}, {
          Hue[{1.2}], {11, 5}}, {
          Hue[{1.2}], {11, 4}}, {
          Hue[0.35, 1, 1], {11, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 2}}, {
          Hue[{1.2}], {10, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 3}}, {
          Hue[{1.2}], {9, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 2}}, {
          Hue[0.3999999999999999, 1, 1], {9, 2}}, {
          Hue[0.35, 1, 1], {9, 1}}, {
          Hue[{1.2}], {8, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 0}}, {
          Hue[{1.2}], {9, 0}}, {
          Hue[{1.2}], {10, 0}}, {
          Hue[{1.2}], {10, 1}}, {
          Hue[{1.2}], {11, 1}}, {
          Hue[{1.2}], {11, 0}}, {
          Hue[{1.2}], {12, 0}}, {
          Hue[{1.2}], {13, 0}}, {
          Hue[{1.2}], {13, 1}}, {
          Hue[{1.2}], {12, 1}}, {
          Hue[{1.2}], {12, 2}}, {
          Hue[0.35, 1, 1], {12, 3}}, {
          Hue[{1.2}], {13, 3}}, {
          Hue[0.3999999999999999, 1, 1], {13, 2}}, {
          Hue[0.5, 1, 1], {14, 2}}, {
          Hue[{0.7}], {14, 3}}, {
          Hue[0.35, 1, 1], {15, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {15, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 1}}, {
          Hue[{1.2}], {14, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 0}}, {
          Hue[0.44999999999999996`, 1, 1], {0, 0}}}, $CellContext`arr = {{
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{0.7}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.5, 1, 1], 
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}}, $CellContext`setarr[
         Pattern[$CellContext`col, 
          Blank[]], {
          Pattern[$CellContext`p1, 
           Blank[]], 
          Pattern[$CellContext`p2, 
           Blank[]]}] := (
        Part[$CellContext`arr, 1 + $CellContext`p1, 
          1 + $CellContext`p2] = $CellContext`col)}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->1532164751],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 3, $CellContext`m$$ = 6, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`m$$], 8, "Number Of Units : N "}, 4, 8, 2}, {{
       Hold[$CellContext`k$$], 4, "Random Weight Matrix"}, 1, 5, 1}}, 
    Typeset`size$$ = {480., {190., 194.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`m$898509$$ = 0, $CellContext`k$898510$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 4, $CellContext`m$$ = 8}, 
      "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$898509$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$898510$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`Drawing[$CellContext`m$$, $CellContext`k$$], 
      "Specifications" :> {{{$CellContext`m$$, 8, "Number Of Units : N "}, 4, 
         8, 2, Appearance -> 
         "Labeled"}, {{$CellContext`k$$, 4, "Random Weight Matrix"}, 1, 5, 1, 
         Appearance -> "Labeled"}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{523., {246., 252.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`Drawing[
         Pattern[N, 
          Blank[]]] := 
       Module[{}, RandomSeed[1]; $CellContext`W = RandomReal[{-100, 
             Plus[100]}, {2 N, 2 N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, 2 N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[10, 2 N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - 
                Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              120}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; 
         Length[$CellContext`basins]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[2 N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[(Flatten[
               Position[$CellContext`att, $CellContext`l]] - 1.)/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^N], {
            1}]; $CellContext`arr = 
          Array[0, {2^N, 2^N}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`Drawing[
         Pattern[N, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{}, 
         SeedRandom[$CellContext`k]; $CellContext`W = RandomReal[{-10, 
             Plus[10]}, {N, N}]; 
         Do[Part[$CellContext`W, $CellContext`i, $CellContext`i] = 
           0, {$CellContext`i, N}]; $CellContext`W = $CellContext`W + 
           Transpose[$CellContext`W]; $CellContext`theta = 
          RandomReal[4, N]; $CellContext`Energy[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          Dot[$CellContext`\[Theta], $CellContext`s] - 
           Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
           2; $CellContext`UpdateState[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`s, 
             Blank[]]] := 
          With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
               RandomInteger[{1, 
                 Length[$CellContext`s]}]]}, 
            
            If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]]; \
$CellContext`graycode[
            Pattern[$CellContext`n, 
             Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
            Map[BitXor[#, 
              Floor[#/2]]& , 
             Range[0, 2^$CellContext`n - 1]]]; $CellContext`Converge2[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := 
          Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
             Length[$CellContext`state], $CellContext`newstate, \
$CellContext`i, $CellContext`energy, $CellContext`newenergy}, \
$CellContext`energy = 
             Dot[$CellContext`\[Theta], $CellContext`state] - 
              Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
            Do[$CellContext`i = 
               RandomInteger[{
                 1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
              Part[$CellContext`newstate, $CellContext`i] = 
               1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
               Dot[$CellContext`\[Theta], $CellContext`newstate] - 
                Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
              If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
              100}]; $CellContext`state2]; $CellContext`FindAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Tally[
            Table[
             $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
              10}]]; $CellContext`FindBasins[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Map[{
             $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
            $CellContext`graycode[
             
             Length[$CellContext`\[Theta]]]]; $CellContext`basins = \
$CellContext`FindBasins[$CellContext`W, $CellContext`theta]; $CellContext`nbrs[
            Pattern[$CellContext`state, 
             Blank[]]] := Table[
            
            ReplacePart[$CellContext`state, $CellContext`j -> 
             1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
             Length[$CellContext`state]}]; $CellContext`MinimumQ[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]][
            Pattern[$CellContext`state, 
             Blank[]]] := Min[
             Map[
              $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
              $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state]; $CellContext`AllAttractors[
            Pattern[$CellContext`w, 
             Blank[]], 
            Pattern[$CellContext`\[Theta], 
             Blank[]]] := Select[
            Tuples[{0, 1}, 
             Length[$CellContext`\[Theta]]], 
            $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]]; \
$CellContext`att1 = $CellContext`AllAttractors[$CellContext`W, \
$CellContext`theta]; $CellContext`att = Cases[
            $CellContext`graycode[N], 
            Apply[Alternatives, $CellContext`att1]]; $CellContext`blend[{
             Pattern[$CellContext`x, 
              Blank[]]}, {
             Blank[]}] := $CellContext`x; $CellContext`blend[
            Pattern[$CellContext`a, 
             Blank[]], 
            Pattern[$CellContext`b, 
             Blank[]]] := 
          Blend[$CellContext`a, $CellContext`b]; $CellContext`colourmap[
            Pattern[$CellContext`l, 
             Blank[]]] := Hue[ReplaceAll[Flatten[
                Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
            Length[$CellContext`att]]; $CellContext`weightedcolour[
            Pattern[$CellContext`l, 
             Blank[]]] := $CellContext`blend[
            Map[$CellContext`colourmap, 
             Part[$CellContext`l, All, 1]], 
            Part[$CellContext`l, All, 2]]; $CellContext`Indexpos[
            Pattern[$CellContext`k1, 
             Blank[]]][{
             Pattern[$CellContext`a, 
              Blank[]], 
             Pattern[$CellContext`b, 
              
              Blank[]]}] := {$CellContext`a, $CellContext`k1}; \
$CellContext`PutIndex[
            Pattern[$CellContext`lis, 
             Blank[]]] := 
          Module[{$CellContext`l = {}}, 
            For[$CellContext`p = 1, $CellContext`p <= 
              Length[$CellContext`lis], 
              Increment[$CellContext`p], 
              AppendTo[$CellContext`l, 
               $CellContext`Indexpos[$CellContext`p][
                
                Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l]; \
$CellContext`rot[
            Pattern[$CellContext`s, 
             Blank[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`y, 
             Blank[]], 
            Pattern[$CellContext`rx, 
             Blank[]], 
            Pattern[$CellContext`ry, 
             Blank[]]] := 
          Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
            If[$CellContext`ry == 0, 
              If[$CellContext`rx == 
                1, $CellContext`x1 = $CellContext`s - 
                  1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
                  1 - $CellContext`y; 
                Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
              
              Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}]; $CellContext`d2xy[
            Pattern[$CellContext`n, 
             Blank[]]][
            Pattern[$CellContext`d, 
             Blank[]]] := 
          Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
            For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
              TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
                 Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
                 
                 BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
              Null]; {$CellContext`x, $CellContext`y}]; \
$CellContext`MapHilbert[
            Pattern[$CellContext`l, 
             Blank[]], 
            Pattern[$CellContext`n, 
             Blank[]]] := MapThread[{#, 
             $CellContext`d2xy[$CellContext`n][#2]}& , 
            Transpose[$CellContext`l]]; $CellContext`h = Apply[{
             $CellContext`weightedcolour[#], #2}& , 
            $CellContext`MapHilbert[
             $CellContext`PutIndex[$CellContext`basins], 2^(N/2)], {
            1}]; $CellContext`arr = 
          Array[0, {2^(N/2), 2^(N/2)}]; $CellContext`setarr[
            Pattern[$CellContext`col, 
             Blank[]], {
             Pattern[$CellContext`p1, 
              Blank[]], 
             Pattern[$CellContext`p2, 
              Blank[]]}] := (
           Part[$CellContext`arr, 1 + $CellContext`p1, 
             1 + $CellContext`p2] = $CellContext`col); 
         Apply[$CellContext`setarr, $CellContext`h, {1}]; 
         ArrayPlot[$CellContext`arr]], $CellContext`W = {{
         0, 8.760312395899067, -3.115008213430496, -2.4046992076033895`, 
          10.38004092676848, 
          2.387096154037163, -12.049383607927357`, -10.236951426796601`}, {
         8.760312395899067, 0, 2.119302660729854, -0.8728111092203292, 
          3.751245513819132, -14.946046588241181`, 12.30983912752044, 
          1.5230832450806808`}, {-3.115008213430496, 2.119302660729854, 0, 
          3.1888768282588558`, -1.6187587138407409`, 0.22569792529586152`, 
          9.382241070978871, 
          0.9990694334999226}, {-2.4046992076033895`, -0.8728111092203292, 
          3.1888768282588558`, 0, 9.883215442325024, 0.4790399284614715, 
          9.115321374233318, -16.222693171735695`}, {
         10.38004092676848, 3.751245513819132, -1.6187587138407409`, 
          9.883215442325024, 0, -11.74458860290471, 1.2974683638438798`, 
          4.6883863983617395`}, {
         2.387096154037163, -14.946046588241181`, 0.22569792529586152`, 
          0.4790399284614715, -11.74458860290471, 
          0, -8.482855080200231, -6.3633827962889775`}, {-12.049383607927357`,
           12.30983912752044, 9.382241070978871, 9.115321374233318, 
          1.2974683638438798`, -8.482855080200231, 0, 
          6.240246447787484}, {-10.236951426796601`, 1.5230832450806808`, 
          0.9990694334999226, -16.222693171735695`, 
          4.6883863983617395`, -6.3633827962889775`, 6.240246447787484, 
          0}}, $CellContext`theta = {3.604623687411376, 0.132766769093986, 
        3.089899823340004, 0.6175605730745026, 0.4016988622423323, 
        0.8128288401954968, 3.546845955280383, 
        2.563481876004311}, $CellContext`Energy[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       Dot[$CellContext`\[Theta], $CellContext`s] - 
        Dot[$CellContext`s, $CellContext`w, $CellContext`s]/
        2, $CellContext`UpdateState[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`s, 
          Blank[]]] := 
       With[{$CellContext`s2 = MapAt[1 - #& , $CellContext`s, 
            RandomInteger[{1, 
              Length[$CellContext`s]}]]}, 
         If[$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s2] < $CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`s], $CellContext`s2, $CellContext`s]], \
$CellContext`graycode[
         Pattern[$CellContext`n, 
          Blank[]]] := Map[IntegerDigits[#, 2, $CellContext`n]& , 
         Map[BitXor[#, 
           Floor[#/2]]& , 
          Range[0, 2^$CellContext`n - 1]]], $CellContext`Converge2[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := 
       Module[{$CellContext`state2 = $CellContext`state, $CellContext`len = 
          Length[$CellContext`state], $CellContext`newstate, $CellContext`i, \
$CellContext`energy, $CellContext`newenergy}, $CellContext`energy = 
          Dot[$CellContext`\[Theta], $CellContext`state] - 
           Dot[$CellContext`state, $CellContext`w, $CellContext`state]/2; 
         Do[$CellContext`i = 
            RandomInteger[{
              1, $CellContext`len}]; $CellContext`newstate = \
$CellContext`state2; 
           Part[$CellContext`newstate, $CellContext`i] = 
            1 - Part[$CellContext`newstate, $CellContext`i]; \
$CellContext`newenergy = 
            Dot[$CellContext`\[Theta], $CellContext`newstate] - 
             Dot[$CellContext`newstate, $CellContext`w, \
$CellContext`newstate]/2; 
           If[$CellContext`newenergy < $CellContext`energy, \
$CellContext`state2 = $CellContext`newstate; $CellContext`energy = \
$CellContext`newenergy; Null], {
           100}]; $CellContext`state2], $CellContext`FindAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Tally[
         Table[
          $CellContext`Converge2[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], {$CellContext`i, 
           10}]], $CellContext`FindBasins[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Map[{
          $CellContext`FindAttractors[$CellContext`w, \
$CellContext`\[Theta]][#], #}& , 
         $CellContext`graycode[
          
          Length[$CellContext`\[Theta]]]], $CellContext`basins = {{{{{0, 0, 0,
             0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {0, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {0, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {0, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {0, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {0, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {0, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {0, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {0, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {0, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {0, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {0, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {0, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 1, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 1, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 1, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 5}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            5}}, {1, 1, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 1, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 1, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 0, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 4}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            6}}, {1, 0, 1, 0, 0, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 2}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            8}}, {1, 0, 1, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 1}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            9}}, {1, 0, 1, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 1, 1, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 1, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 1, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 1, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 1, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 1, 0, 1, 0, 
          1}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 3}, {{0, 1, 1, 1, 1, 0, 1, 0}, 
            7}}, {1, 0, 0, 1, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 1, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 1, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 1, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 1, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 6}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            4}}, {1, 0, 0, 0, 1, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 4}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            6}}, {1, 0, 0, 0, 1, 1, 0, 
          0}}, {{{{0, 0, 0, 0, 0, 0, 0, 0}, 10}}, {1, 0, 0, 0, 0, 1, 0, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 7}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            3}}, {1, 0, 0, 0, 0, 1, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 1, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 8}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            2}}, {1, 0, 0, 0, 0, 1, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 1, 
          0}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 10}}, {1, 0, 0, 0, 0, 0, 1, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 9}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            1}}, {1, 0, 0, 0, 0, 0, 0, 
          1}}, {{{{0, 1, 1, 1, 1, 0, 1, 0}, 5}, {{0, 0, 0, 0, 0, 0, 0, 0}, 
            5}}, {1, 0, 0, 0, 0, 0, 0, 0}}}, $CellContext`nbrs[
         Pattern[$CellContext`state, 
          Blank[]]] := Table[
         ReplacePart[$CellContext`state, $CellContext`j -> 
          1 - Part[$CellContext`state, $CellContext`j]], {$CellContext`j, 
          Length[$CellContext`state]}], $CellContext`MinimumQ[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]][
         Pattern[$CellContext`state, 
          Blank[]]] := Min[
          Map[
           $CellContext`Energy[$CellContext`w, $CellContext`\[Theta]], 
           $CellContext`nbrs[$CellContext`state]]] > \
$CellContext`Energy[$CellContext`w, \
$CellContext`\[Theta]][$CellContext`state], $CellContext`AllAttractors[
         Pattern[$CellContext`w, 
          Blank[]], 
         Pattern[$CellContext`\[Theta], 
          Blank[]]] := Select[
         Tuples[{0, 1}, 
          Length[$CellContext`\[Theta]]], 
         $CellContext`MinimumQ[$CellContext`w, $CellContext`\[Theta]]], \
$CellContext`att1 = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 1, 
        0}}, $CellContext`att = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 
        1, 0}}, $CellContext`blend[{
          Pattern[$CellContext`x, 
           Blank[]]}, {
          Blank[]}] := $CellContext`x, $CellContext`blend[
         Pattern[$CellContext`a, 
          Blank[]], 
         Pattern[$CellContext`b, 
          Blank[]]] := 
       Blend[$CellContext`a, $CellContext`b], $CellContext`colourmap[
         Pattern[$CellContext`l, 
          Blank[]]] := Hue[ReplaceAll[Flatten[
             Position[$CellContext`att, $CellContext`l]] + 0.4, {} -> 0.2]/
         Length[$CellContext`att]], $CellContext`weightedcolour[
         Pattern[$CellContext`l, 
          Blank[]]] := $CellContext`blend[
         Map[$CellContext`colourmap, 
          Part[$CellContext`l, All, 1]], 
         Part[$CellContext`l, All, 2]], $CellContext`Indexpos[
         Pattern[$CellContext`k1, 
          Blank[]]][{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           
           Blank[]]}] := {$CellContext`a, $CellContext`k1}, \
$CellContext`PutIndex[
         Pattern[$CellContext`lis, 
          Blank[]]] := 
       Module[{$CellContext`l = {}}, 
         For[$CellContext`p = 1, $CellContext`p <= Length[$CellContext`lis], 
           Increment[$CellContext`p], 
           AppendTo[$CellContext`l, 
            $CellContext`Indexpos[$CellContext`p][
             
             Part[$CellContext`lis, $CellContext`p]]]]; $CellContext`l], \
$CellContext`p = 257, $CellContext`rot[
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`y, 
          Blank[]], 
         Pattern[$CellContext`rx, 
          Blank[]], 
         Pattern[$CellContext`ry, 
          Blank[]]] := 
       Module[{$CellContext`x1 = $CellContext`x, $CellContext`y1 = \
$CellContext`y, $CellContext`tp}, 
         If[$CellContext`ry == 0, 
           If[$CellContext`rx == 
             1, $CellContext`x1 = $CellContext`s - 
               1 - $CellContext`x; $CellContext`y1 = $CellContext`s - 
               1 - $CellContext`y; 
             Null]; $CellContext`tp = $CellContext`x1; $CellContext`x1 = \
$CellContext`y1; $CellContext`y1 = $CellContext`tp; 
           Null]; {$CellContext`s, $CellContext`x1, $CellContext`y1, \
$CellContext`rx, $CellContext`ry}], $CellContext`d2xy[
         Pattern[$CellContext`n, 
          Blank[]]][
         Pattern[$CellContext`d, 
          Blank[]]] := 
       Module[{$CellContext`rx, $CellContext`ry, $CellContext`t = \
$CellContext`d, $CellContext`x = 0, $CellContext`y = 0, $CellContext`s}, 
         For[$CellContext`s = 1, $CellContext`s < $CellContext`n, 
           TimesBy[$CellContext`s, 2], $CellContext`rx = BitAnd[1, 
              Floor[$CellContext`t/2]]; $CellContext`ry = BitAnd[1, 
              
              BitXor[$CellContext`t, $CellContext`rx]]; {$CellContext`s, \
$CellContext`x, $CellContext`y, $CellContext`rx, $CellContext`ry} = \
$CellContext`rot[$CellContext`s, $CellContext`x, $CellContext`y, \
$CellContext`rx, $CellContext`ry]; $CellContext`x = $CellContext`x + \
$CellContext`s $CellContext`rx; $CellContext`y = $CellContext`y + \
$CellContext`s $CellContext`ry; $CellContext`t = Floor[$CellContext`t/4]; 
           Null]; {$CellContext`x, $CellContext`y}], $CellContext`MapHilbert[
         Pattern[$CellContext`l, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := MapThread[{#, 
          $CellContext`d2xy[$CellContext`n][#2]}& , 
         Transpose[$CellContext`l]], $CellContext`h = {{
          Hue[{0.7}], {1, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 1}}, {
          Hue[{1.2}], {0, 1}}, {
          Hue[0.3999999999999999, 1, 1], {0, 2}}, {
          Hue[0.3999999999999999, 1, 1], {0, 3}}, {
          Hue[0.35, 1, 1], {1, 3}}, {
          Hue[0.44999999999999996`, 1, 1], {1, 2}}, {
          Hue[{0.7}], {2, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 1}}, {
          Hue[{1.2}], {2, 0}}, {
          Hue[{1.2}], {3, 0}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 0}}, {
          Hue[{1.2}], {4, 1}}, {
          Hue[{1.2}], {5, 1}}, {
          Hue[{1.2}], {5, 0}}, {
          Hue[{1.2}], {6, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 0}}, {
          Hue[{1.2}], {7, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 1}}, {
          Hue[{1.2}], {6, 2}}, {
          Hue[0.44999999999999996`, 1, 1], {7, 2}}, {
          Hue[0.35, 1, 1], {7, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {5, 3}}, {
          Hue[{1.2}], {5, 2}}, {
          Hue[{1.2}], {4, 2}}, {
          Hue[{1.2}], {4, 3}}, {
          Hue[0.35, 1, 1], {4, 4}}, {
          Hue[{1.2}], {4, 5}}, {
          Hue[{1.2}], {5, 5}}, {
          Hue[{1.2}], {5, 4}}, {
          Hue[{1.2}], {6, 4}}, {
          Hue[{1.2}], {7, 4}}, {
          Hue[{1.2}], {7, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 5}}, {
          Hue[{1.2}], {6, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 7}}, {
          Hue[{1.2}], {6, 7}}, {
          Hue[{1.2}], {5, 7}}, {
          Hue[{1.2}], {5, 6}}, {
          Hue[{1.2}], {4, 6}}, {
          Hue[{1.2}], {4, 7}}, {
          Hue[{1.2}], {3, 7}}, {
          Hue[{1.2}], {2, 7}}, {
          Hue[{1.2}], {2, 6}}, {
          Hue[{1.2}], {3, 6}}, {
          Hue[{1.2}], {3, 5}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 4}}, {
          Hue[{1.2}], {2, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {2, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {1, 5}}, {
          Hue[0.35, 1, 1], {1, 4}}, {
          Hue[0.3999999999999999, 1, 1], {0, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 6}}, {
          Hue[{1.2}], {1, 6}}, {
          Hue[{1.2}], {1, 7}}, {
          Hue[{1.2}], {0, 7}}, {
          Hue[0.29999999999999993`, 1, 1], {0, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {0, 9}}, {
          Hue[0.24999999999999994`, 1, 1], {1, 9}}, {
          Hue[{1.2}], {1, 8}}, {
          Hue[{1.2}], {2, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {3, 8}}, {
          Hue[{1.2}], {3, 9}}, {
          Hue[{1.2}], {2, 9}}, {
          Hue[0.35, 1, 1], {2, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 10}}, {
          Hue[0.35, 1, 1], {3, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {2, 11}}, {
          Hue[{1.2}], {1, 11}}, {
          Hue[{1.2}], {1, 10}}, {
          Hue[{1.2}], {0, 10}}, {
          Hue[{1.2}], {0, 11}}, {
          Hue[{1.2}], {0, 12}}, {
          Hue[{1.2}], {1, 12}}, {
          Hue[{1.2}], {1, 13}}, {
          Hue[{1.2}], {0, 13}}, {
          Hue[{1.2}], {0, 14}}, {
          Hue[{1.2}], {0, 15}}, {
          Hue[{1.2}], {1, 15}}, {
          Hue[{1.2}], {1, 14}}, {
          Hue[{1.2}], {2, 14}}, {
          Hue[{1.2}], {2, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {3, 15}}, {
          Hue[{1.2}], {3, 14}}, {
          Hue[{1.2}], {3, 13}}, {
          Hue[{1.2}], {2, 13}}, {
          Hue[{1.2}], {2, 12}}, {
          Hue[{1.2}], {3, 12}}, {
          Hue[{1.2}], {4, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 12}}, {
          Hue[{1.2}], {5, 13}}, {
          Hue[{1.2}], {4, 13}}, {
          Hue[{1.2}], {4, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {4, 15}}, {
          Hue[{1.2}], {5, 15}}, {
          Hue[{1.2}], {5, 14}}, {
          Hue[0.24999999999999994`, 1, 1], {6, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {7, 15}}, {
          Hue[{1.2}], {7, 14}}, {
          Hue[{1.2}], {7, 13}}, {
          Hue[{1.2}], {6, 13}}, {
          Hue[{1.2}], {6, 12}}, {
          Hue[{1.2}], {7, 12}}, {
          Hue[{1.2}], {7, 11}}, {
          Hue[{1.2}], {7, 10}}, {
          Hue[{1.2}], {6, 10}}, {
          Hue[{1.2}], {6, 11}}, {
          Hue[{1.2}], {5, 11}}, {
          Hue[0.29999999999999993`, 1, 1], {4, 11}}, {
          Hue[{1.2}], {4, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 10}}, {
          Hue[0.35, 1, 1], {5, 9}}, {
          Hue[0.35, 1, 1], {4, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {4, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {5, 8}}, {
          Hue[0.29999999999999993`, 1, 1], {6, 8}}, {
          Hue[{1.2}], {6, 9}}, {
          Hue[{1.2}], {7, 9}}, {
          Hue[0.29999999999999993`, 1, 1], {7, 8}}, {
          Hue[0.35, 1, 1], {8, 8}}, {
          Hue[{1.2}], {8, 9}}, {
          Hue[{1.2}], {9, 9}}, {
          Hue[{1.2}], {9, 8}}, {
          Hue[{1.2}], {10, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 8}}, {
          Hue[{1.2}], {11, 9}}, {
          Hue[0.35, 1, 1], {10, 9}}, {
          Hue[0.35, 1, 1], {10, 10}}, {
          Hue[{1.2}], {11, 10}}, {
          Hue[{1.2}], {11, 11}}, {
          Hue[{1.2}], {10, 11}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 11}}, {
          Hue[{1.2}], {9, 10}}, {
          Hue[{1.2}], {8, 10}}, {
          Hue[{1.2}], {8, 11}}, {
          Hue[{1.2}], {8, 12}}, {
          Hue[{1.2}], {9, 12}}, {
          Hue[{1.2}], {9, 13}}, {
          Hue[{1.2}], {8, 13}}, {
          Hue[{1.2}], {8, 14}}, {
          Hue[{1.2}], {8, 15}}, {
          Hue[{1.2}], {9, 15}}, {
          Hue[{1.2}], {9, 14}}, {
          Hue[{1.2}], {10, 14}}, {
          Hue[{1.2}], {10, 15}}, {
          Hue[{1.2}], {11, 15}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {11, 13}}, {
          Hue[{1.2}], {10, 13}}, {
          Hue[{1.2}], {10, 12}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 12}}, {
          Hue[{1.2}], {12, 12}}, {
          Hue[{1.2}], {13, 12}}, {
          Hue[{1.2}], {13, 13}}, {
          Hue[{1.2}], {12, 13}}, {
          Hue[{1.2}], {12, 14}}, {
          Hue[{1.2}], {12, 15}}, {
          Hue[{1.2}], {13, 15}}, {
          Hue[{1.2}], {13, 14}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 14}}, {
          Hue[{1.2}], {14, 15}}, {
          Hue[{1.2}], {15, 15}}, {
          Hue[{1.2}], {15, 14}}, {
          Hue[{1.2}], {15, 13}}, {
          Hue[{1.2}], {14, 13}}, {
          Hue[{1.2}], {14, 12}}, {
          Hue[{1.2}], {15, 12}}, {
          Hue[{1.2}], {15, 11}}, {
          Hue[{1.2}], {15, 10}}, {
          Hue[{1.2}], {14, 10}}, {
          Hue[{1.2}], {14, 11}}, {
          Hue[{1.2}], {13, 11}}, {
          Hue[{1.2}], {12, 11}}, {
          Hue[{1.2}], {12, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 10}}, {
          Hue[0.24999999999999994`, 1, 1], {13, 9}}, {
          Hue[0.44999999999999996`, 1, 1], {12, 9}}, {
          Hue[{1.2}], {12, 8}}, {
          Hue[{1.2}], {13, 8}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 8}}, {
          Hue[{1.2}], {14, 9}}, {
          Hue[{1.2}], {15, 9}}, {
          Hue[{1.2}], {15, 8}}, {
          Hue[{1.2}], {15, 7}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 7}}, {
          Hue[{1.2}], {14, 6}}, {
          Hue[{1.2}], {15, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 5}}, {
          Hue[{1.2}], {15, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 4}}, {
          Hue[0.29999999999999993`, 1, 1], {14, 5}}, {
          Hue[0.3999999999999999, 1, 1], {13, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {13, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {12, 5}}, {
          Hue[{1.2}], {12, 6}}, {
          Hue[{1.2}], {13, 6}}, {
          Hue[{1.2}], {13, 7}}, {
          Hue[{1.2}], {12, 7}}, {
          Hue[{1.2}], {11, 7}}, {
          Hue[{1.2}], {11, 6}}, {
          Hue[{1.2}], {10, 6}}, {
          Hue[{1.2}], {10, 7}}, {
          Hue[{1.2}], {9, 7}}, {
          Hue[{1.2}], {8, 7}}, {
          Hue[{1.2}], {8, 6}}, {
          Hue[0.24999999999999994`, 1, 1], {9, 6}}, {
          Hue[{1.2}], {9, 5}}, {
          Hue[0.35, 1, 1], {8, 5}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 4}}, {
          Hue[{1.2}], {9, 4}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 4}}, {
          Hue[{1.2}], {10, 5}}, {
          Hue[{1.2}], {11, 5}}, {
          Hue[{1.2}], {11, 4}}, {
          Hue[0.35, 1, 1], {11, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {11, 2}}, {
          Hue[{1.2}], {10, 2}}, {
          Hue[0.24999999999999994`, 1, 1], {10, 3}}, {
          Hue[{1.2}], {9, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 3}}, {
          Hue[0.29999999999999993`, 1, 1], {8, 2}}, {
          Hue[0.3999999999999999, 1, 1], {9, 2}}, {
          Hue[0.35, 1, 1], {9, 1}}, {
          Hue[{1.2}], {8, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {8, 0}}, {
          Hue[{1.2}], {9, 0}}, {
          Hue[{1.2}], {10, 0}}, {
          Hue[{1.2}], {10, 1}}, {
          Hue[{1.2}], {11, 1}}, {
          Hue[{1.2}], {11, 0}}, {
          Hue[{1.2}], {12, 0}}, {
          Hue[{1.2}], {13, 0}}, {
          Hue[{1.2}], {13, 1}}, {
          Hue[{1.2}], {12, 1}}, {
          Hue[{1.2}], {12, 2}}, {
          Hue[0.35, 1, 1], {12, 3}}, {
          Hue[{1.2}], {13, 3}}, {
          Hue[0.3999999999999999, 1, 1], {13, 2}}, {
          Hue[0.5, 1, 1], {14, 2}}, {
          Hue[{0.7}], {14, 3}}, {
          Hue[0.35, 1, 1], {15, 3}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 2}}, {
          Hue[0.29999999999999993`, 1, 1], {15, 1}}, {
          Hue[0.24999999999999994`, 1, 1], {14, 1}}, {
          Hue[{1.2}], {14, 0}}, {
          Hue[0.24999999999999994`, 1, 1], {15, 0}}, {
          Hue[0.44999999999999996`, 1, 1], {0, 0}}}, $CellContext`arr = {{
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{0.7}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.35, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.44999999999999996`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.3999999999999999, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}, {
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.5, 1, 1], 
          Hue[{0.7}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[{1.2}]}, {
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.29999999999999993`, 1, 1], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[0.35, 1, 1], 
          Hue[{1.2}], 
          Hue[0.24999999999999994`, 1, 1], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}], 
          Hue[{1.2}]}}, $CellContext`setarr[
         Pattern[$CellContext`col, 
          Blank[]], {
          Pattern[$CellContext`p1, 
           Blank[]], 
          Pattern[$CellContext`p2, 
           Blank[]]}] := (
        Part[$CellContext`arr, 1 + $CellContext`p1, 
          1 + $CellContext`p2] = $CellContext`col)}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->1351829927]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
Reference Reading : http://www.scholarpedia.org/article/Boltzmann_machine\
\>", "DetailNotes",
 CellChangeTimes->{{3.5506158871843987`*^9, 3.5506158950911207`*^9}},
 CellID->1322071377]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["Boltzmann Machine", "SearchTerms",
 CellChangeTimes->{{3.550615735660989*^9, 3.5506157413074627`*^9}},
 CellID->260431866]
}, Open  ]],

Cell["", "RelatedLinksSection"],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell["\<\
Contributed by: Taliesin Beynon, Sanjit Singh Batra\
\>", "Author",
 CellChangeTimes->{{3.5505987409193163`*^9, 3.550598742309237*^9}, {
  3.550598889734336*^9, 3.5505988937213717`*^9}, {3.550613869565534*^9, 
  3.550613871708906*^9}, {3.5506140082863073`*^9, 3.550614011952382*^9}},
 CellID->2104909484]
}, Open  ]]
}, Open  ]]
},
WindowSize->{700, Automatic},
WindowMargins->{{10, Automatic}, {0, 0}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 5, \
2011)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[348169, 7672, 1464, 31, 29, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[349636, 7705, 908, 21, 29, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[346310, 7621, 637, 15, 29, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[345967, 7608, 340, 11, 29, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[347797, 7661, 369, 9, 29, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[344971, 7580, 312, 8, 29, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[345286, 7590, 678, 16, 29, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[346950, 7638, 844, 21, 29, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 351566, 7766},
 {"BookmarkAnimation", 351684, 7769},
 {"CreateAndDeleteLocators", 351806, 7772},
 {"DragLocators", 351923, 7775},
 {"GamepadControls", 352032, 7778},
 {"ResizeImages", 352140, 7781},
 {"RotateAndZoomIn3D", 352250, 7784},
 {"SliderZoom", 352359, 7787}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 150, 3, 104, "DemoTitle"],
Cell[CellGroupData[{
Cell[754, 29, 33, 0, 261, "InitializationSection"],
Cell[790, 31, 17147, 446, 1119, "Input",
 CellID->1753350093]
}, Open  ]],
Cell[CellGroupData[{
Cell[17974, 482, 29, 0, 231, "ManipulateSection"],
Cell[CellGroupData[{
Cell[18028, 486, 982, 22, 69, "Input",
 CellID->1511770166],
Cell[19013, 510, 39739, 869, 510, "Output",
 CellID->774320898]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[58801, 1385, 36, 0, 171, "ManipulateCaptionSection"],
Cell[58840, 1387, 911, 14, 108, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59788, 1406, 28, 0, 173, "ThumbnailSection"],
Cell[59819, 1408, 70920, 1529, 510, "Output",
 CellID->48551271],
Cell[130742, 2939, 459, 11, 21, "Message",
 CellID->1646441797],
Cell[131204, 2952, 590, 12, 21, "Message",
 CellID->1420490584]
}, Open  ]],
Cell[CellGroupData[{
Cell[131831, 2969, 28, 0, 143, "SnapshotsSection"],
Cell[131862, 2971, 70921, 1529, 510, "Output",
 CellID->263932026],
Cell[202786, 4502, 70922, 1529, 510, "Output",
 CellID->1532164751],
Cell[273711, 6033, 70922, 1529, 510, "Output",
 CellID->1351829927]
}, Open  ]],
Cell[CellGroupData[{
Cell[344670, 7567, 26, 0, 337, "DetailsSection"],
Cell[344699, 7569, 195, 4, 22, "DetailNotes",
 CellID->1322071377]
}, Open  ]],
Cell[CellGroupData[{
Cell[344931, 7578, 37, 0, 127, "ControlSuggestionsSection"],
Cell[344971, 7580, 312, 8, 29, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[345286, 7590, 678, 16, 29, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[345967, 7608, 340, 11, 29, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[346310, 7621, 637, 15, 29, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[346950, 7638, 844, 21, 29, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[347797, 7661, 369, 9, 29, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[348169, 7672, 1464, 31, 29, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[349636, 7705, 908, 21, 29, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[350581, 7731, 30, 0, 155, "SearchTermsSection"],
Cell[350614, 7733, 128, 2, 21, "SearchTerms",
 CellID->260431866]
}, Open  ]],
Cell[350757, 7738, 31, 0, 141, "RelatedLinksSection"],
Cell[CellGroupData[{
Cell[350813, 7742, 25, 0, 129, "AuthorSection"],
Cell[350841, 7744, 314, 6, 22, "Author",
 CellID->2104909484]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
